import{_ as e,c as a,o as t,a as n}from"./app-DNVZcai8.js";const s={},i=n('<h1 id="_5-集群" tabindex="-1"><a class="header-anchor" href="#_5-集群"><span>5. 集群</span></a></h1><p>Redis 集群包括主从复制、哨兵集群和分片集群。</p><h2 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制"><span>主从复制</span></a></h2><p>主从复制方式采用一主多从，读写分离的策略。 在主库写，从库读。主从同步采用异步的方式。</p><h2 id="哨兵集群" tabindex="-1"><a class="header-anchor" href="#哨兵集群"><span>哨兵集群</span></a></h2><p>为实现一主多从架构中主库崩溃后，自动推举新的主库，Redis 使用哨兵模式。</p><p>哨兵是集群中的一个特殊节点，它的作用是<strong>监控</strong>、<strong>选主</strong>和<strong>通知</strong>。 监控即监控主从结点状态，当主节点故障时，在从节点选主，并将选取新主通知给其他结点以及客户端。</p><p>在实际使用中，通常使用多个哨兵组成哨兵集群。 单个哨兵会每隔几秒向主从节点发送 PING 命令，当某个结点没有在规定时间内响应 PING 命令，该哨兵就将节点标记为主观下线。 同时，该哨兵会向其他哨兵发出命令，其他哨兵会根据自身的监控结果投出赞成或反对票。 当赞成票超过一定阈值，该结点便被标记为客观下线，若该结点还是主节点，则进入选主过程。</p><p>选主的依据包括优先级、复制进度和 ID 号。优先级越高、复制进度越多、ID 号越小，越优先选取为新的主节点。 选取新的主节点后，将其余的从节点指向新的主节点。 之后，哨兵会通过发布-订阅模式通知客户端主节点发生更改。 最后，哨兵会持续监控旧主节点，当旧主节点重新上线，就让其成为从节点。</p><h2 id="分片集群" tabindex="-1"><a class="header-anchor" href="#分片集群"><span>分片集群</span></a></h2><p>在分片集群中，整个集群被划分为多个哈希槽，这些哈希槽会被自动或手动分配到多个结点上。</p><p>结合哈希函数和取模操作，可以将 key 映射到哈希槽。</p>',12),r=[i];function l(c,p){return t(),a("div",null,r)}const o=e(s,[["render",l],["__file","5-集群.html.vue"]]),d=JSON.parse('{"path":"/dev/principle/redis/5-%E9%9B%86%E7%BE%A4.html","title":"5. 集群","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"主从复制","slug":"主从复制","link":"#主从复制","children":[]},{"level":2,"title":"哨兵集群","slug":"哨兵集群","link":"#哨兵集群","children":[]},{"level":2,"title":"分片集群","slug":"分片集群","link":"#分片集群","children":[]}],"git":{"updatedTime":1725412272000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":1}]},"filePathRelative":"dev/principle/redis/5-集群.md"}');export{o as comp,d as data};
