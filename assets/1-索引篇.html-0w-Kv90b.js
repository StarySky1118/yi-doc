import{_ as e,c as a,o as t,a as n}from"./app-CcXSsoy8.js";const s={},l=n('<h1 id="_1-索引篇" tabindex="-1"><a class="header-anchor" href="#_1-索引篇"><span>1. 索引篇</span></a></h1><p>索引是什么？怎么实现的？怎么用？</p><p>数据库索引利用额外的数据结构来组织数据，以空间换时间，加快查询速度。</p><h2 id="mysql-索引是使用什么数据结构实现的" tabindex="-1"><a class="header-anchor" href="#mysql-索引是使用什么数据结构实现的"><span>MySQL 索引是使用什么数据结构实现的？</span></a></h2><p>MySQL InnoDB 存储引擎使用 B+ 树作为索引的数据结构，B+ 树是一种自平衡的多叉树，非叶子节点只存储索引，叶子节点存储数据。 并且叶子节点通过双向链表连接。 得益于这种数据结构，查询的时间复杂度为对数级，并且支持高效的范围查询。</p><h2 id="b-树查询数据的全过程是怎样的" tabindex="-1"><a class="header-anchor" href="#b-树查询数据的全过程是怎样的"><span>B+ 树查询数据的全过程是怎样的？</span></a></h2><p>查询数据时，首先经过非叶子结点的索引抵达叶子结点。</p><p>叶子结点并非只有一条记录，而是一页记录，例如 16K，这是为满足空间局部性原理所做的一种配置。 一页记录有许多条记录，可以使用页目录，利用二分法查找记录所在分组。 再在分组中使用遍历的方式查找到指定记录。</p><h2 id="索引的类型" tabindex="-1"><a class="header-anchor" href="#索引的类型"><span>索引的类型</span></a></h2><p>可以根据使用的数据类型、字段性质划分以及</p>',10),i=[l];function c(r,h){return t(),a("div",null,i)}const d=e(s,[["render",c],["__file","1-索引篇.html.vue"]]),o=JSON.parse('{"path":"/dev/principle/mysql/1-%E7%B4%A2%E5%BC%95%E7%AF%87.html","title":"1. 索引篇","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"MySQL 索引是使用什么数据结构实现的？","slug":"mysql-索引是使用什么数据结构实现的","link":"#mysql-索引是使用什么数据结构实现的","children":[]},{"level":2,"title":"B+ 树查询数据的全过程是怎样的？","slug":"b-树查询数据的全过程是怎样的","link":"#b-树查询数据的全过程是怎样的","children":[]},{"level":2,"title":"索引的类型","slug":"索引的类型","link":"#索引的类型","children":[]}],"git":{"updatedTime":1723702370000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":2}]},"filePathRelative":"dev/principle/mysql/1-索引篇.md"}');export{d as comp,o as data};
