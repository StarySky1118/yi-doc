import{_ as e,c as t,o as p,a}from"./app-B51Ae0sL.js";const h={},n=a('<h1 id="_2-应用层" tabindex="-1"><a class="header-anchor" href="#_2-应用层"><span>2. 应用层</span></a></h1><h2 id="http-报文有哪些部分" tabindex="-1"><a class="header-anchor" href="#http-报文有哪些部分"><span>HTTP 报文有哪些部分？</span></a></h2><p>HTTP 报文包括请求报文和响应报文。</p><ol><li>对于 HTTP 请求报文，主要包括请求行、请求头和请求体。</li></ol><p>请求行包括请求方法、请求目标和 HTTP 协议版本。</p><p>请求头包含请求的附加信息，例如 User-Agent 等。</p><p>请求体包含请求的数据，例如 Post 请求可在请求体中放入数据。</p><ol start="2"><li>对于 HTTP 响应报文，主要包括响应行、响应头和响应体。</li></ol><p>响应行包括 HTTP 协议版本、状态码与状态信息。</p><p>响应头包含响应的附加信息，例如 Content-Length。</p><p>响应体包含响应的数据，例如服务器返回的 JSON。</p><h2 id="http-有哪些状态码" tabindex="-1"><a class="header-anchor" href="#http-有哪些状态码"><span>HTTP 有哪些状态码？</span></a></h2><p>HTTP 状态码分为五类，分别以 1~5 开头。</p><ol><li>1xx</li></ol><p>表示提示信息，开发过程中很少用到</p><ol start="2"><li>2xx</li></ol><p>表示服务端成功处理请求。 <code>200 OK</code>表示一切正常；<code>204 No Conent</code>表示响应体中没有数据；<code>206 Patial Content</code>表示响应体中包含了一部分数据，通常用于分块下载和断点续传。</p><ol start="3"><li>3xx</li></ol><p>表示客户端请求的资源发生了变动，需要重定向。 <code>301 Moved Permanently</code>表示永久重定向，客户端需要访问新的 URL 获取资源。 <code>302 Found</code>表示临时重定向，暂时需要访问新的 URL 获取资源。 301 和 302 都会在响应头中使用字段 <code>Location</code>，指明后续要跳转的 URL，浏览器会自动进行重定向。 <code>304 Not Modified</code>表示资源未修改，浏览器可以继续使用缓存。</p><ol start="4"><li>4xx</li></ol><p>表示浏览器发送的报文有误，服务器无法处理。 <code>400 Bad Request</code>表示客户端请求的报文有错误。 <code>403 Forbidden</code>表示服务器禁止访问资源。 <code>404 Not Found</code>表示请求的资源在服务器上未找到。</p><ol start="5"><li>5xx</li></ol><p>表示服务器内部出现了错误。 <code>500 Internal Server Error</code>表示服务器内部错误。 <code>501 Not Implemented</code>表示功能未实现。 <code>502 Bad Gateway</code>通常是网关相关的错误。例如配置错误，网关无法与后端服务器正确连接。 <code>503 Service Unavailable</code>：表示服务器当前无法提供服务。 <code>504 Gateway timeout</code>：表示网关获取后端请求超时。</p><h2 id="http-长连接是什么" tabindex="-1"><a class="header-anchor" href="#http-长连接是什么"><span>HTTP 长连接是什么？</span></a></h2><p>HTTP 是基于 TCP 的，因此客户端与服务端使用 HTTP 通信之前，首先要建立 TCP 连接。</p><p>HTTP 长连接是指，客户端与服务端在完成一次请求-响应之后，不释放 TCP 连接，而是继续在这个 TCP 连接上使用 HTTP 进行数据传输。 这样可以避免频繁建立与断开 TCP 连接造成的开销。</p><h2 id="http-为什么不安全" tabindex="-1"><a class="header-anchor" href="#http-为什么不安全"><span>HTTP 为什么不安全？</span></a></h2><p>由于 HTTP 使用明文传输，因此会带来窃听风险、篡改风险与冒充风险。</p><h2 id="https-与-http-有什么区别-https-是如何工作的" tabindex="-1"><a class="header-anchor" href="#https-与-http-有什么区别-https-是如何工作的"><span>HTTPS 与 HTTP 有什么区别？HTTPS 是如何工作的？</span></a></h2><p>HTTPS 在 HTTP 的基础上，在应用层和传输层添加 SSL/TLS 层，以实现数据加密传输。</p><p>HTTPS 首先通过 TLS 握手过程交换密钥，后续都基于该密钥进行对称加密传输。 密钥交换算法又分为 RSA 算法和 ECDHE 算法，RSA 是传统的密钥交换算法，ECDHE 才是大多数网站所使用的。</p><p>由于 ECDHE 算法是在 RSA 基础上改进而来的，因此我着重介绍基于 RSA 算法 TLS 握手过程。 其过程如下：</p><p>首先，客户端向服务端发起加密连接请求，并生成一个随机数传输给服务端。</p><p>然后，服务端接收到客户端加密连接请求后，生成一个随机数，连同证书一起发给客户端。</p><p>客户端接收到数据后，首先进行证书校验。校验通过后，自己再生成一个随机数，称为 Pre-master。 Pre-master 与前面两个随机数组合成为最终密钥。 客户端会使用服务端公钥加密 pre-master 传输给服务端。</p><p>服务端接收到数据后，使用自己的私钥解密，获取 pre-master，组合成为最终加密密钥。</p><p>这样一来，客户端和服务端就通过协商安全交换了对称加密密钥，后续可以使用该密钥进行对称加密通信。</p><h2 id="客户端如何进行证书校验" tabindex="-1"><a class="header-anchor" href="#客户端如何进行证书校验"><span>客户端如何进行证书校验？</span></a></h2><p>证书一般分为两个部分： 第一部分包含服务端公钥、使用的哈希函数等信息，第二部分是一个签名，计算方法是首先做第一部分的哈希，然后使用 CA 私钥进行签名。</p><p>证书验证就是比对两个哈希的过程，第一个哈希通过 CA 公钥解密签名得到，第二个哈希通过对证书第一部分取相同哈希得到。 如果两个哈希相同，证书校验通过。</p><h2 id="什么是-https-中间人攻击-如何防范" tabindex="-1"><a class="header-anchor" href="#什么是-https-中间人攻击-如何防范"><span>什么是 HTTPS 中间人攻击？如何防范？</span></a></h2><p>HTTPS 中间人攻击是指在客户端与服务端之间，出现了一个中间人，他通过伪造证书冒充服务端，与客户端建立加密连接，同时与服务端建立加密连接，进行恶意操作。</p><p>为防止 HTTPS 中间人攻击，要保证证书是可信任的证书颁发机构颁发的。还可以对应用层数据作进一步加密。</p><h2 id="http-2-相比-http-1-1-有哪些改进" tabindex="-1"><a class="header-anchor" href="#http-2-相比-http-1-1-有哪些改进"><span>HTTP 2 相比 HTTP 1.1 有哪些改进？</span></a></h2><p>HTTP 2 相比 HTTP 1.1 的改进主要在提高传输效率、改进队头阻塞和服务器主动推送方面。</p><p>首先，HTTP 2 使用 HPACK 算法进行头部压缩，并全面采用二进制格式，这极大提高了传输效率。</p><p>HTTP 2 引入 Stream 概念，多个 Stream 共用 TCP 连接，解决了队头阻塞问题。</p><p>HTTP 2 中，服务端可以主动推送资源。</p><h2 id="dns-的端口号是多少" tabindex="-1"><a class="header-anchor" href="#dns-的端口号是多少"><span>DNS 的端口号是多少？</span></a></h2><p>53</p><h2 id="dns-是基于什么协议实现的" tabindex="-1"><a class="header-anchor" href="#dns-是基于什么协议实现的"><span>DNS 是基于什么协议实现的？</span></a></h2><p>DNS 是基于 UDP 协议实现的。</p><p>选用 UDP 是 DNS 查询的使用要求决定的。DNS 查询要求低延迟、并且数据交换量较少。 因此选用 UDP 协议。</p><h2 id="介绍一下-http-的无状态性" tabindex="-1"><a class="header-anchor" href="#介绍一下-http-的无状态性"><span>介绍一下 HTTP 的无状态性</span></a></h2><p>HTTP 的无状态性是指：HTTP 本身不提供状态管理功能。</p><p>如果希望标识客户端，需要在请求中包含客户端信息，服务端才能够处理。</p><p>可以使用 cookie、session 等机制进行状态管理。</p><h2 id="http-是无状态的-如何进行-http-状态管理" tabindex="-1"><a class="header-anchor" href="#http-是无状态的-如何进行-http-状态管理"><span>HTTP 是无状态的，如何进行 HTTP 状态管理？</span></a></h2><p>Cookie、Session 和 JWT Token 都是支持 HTTP 进行状态管理的技术。</p><p>Cookie 存储于客户端，包含一些客户端信息，当浏览器向服务器发起请求，会自动附带 Cookie 中的数据。</p><p>Session 存储于服务端，它相当于将分散在各个客户端的状态信息进行统一管理。 服务端给每个客户端分配一个唯一的 SessionId，这个 SessionId 通过 Cookie 或 URL 重写的方式发送给客户端，客户端后续请求附带这个 SessionId， 服务端就可以利用这个 SessionId 查询 Session 数据，识别出客户端。</p><p>为了避免在两端存储数据，出现了 JWT Token 技术。 JWT Token 是服务端向客户端颁发的令牌，JWT Token 由头部、载荷和签名三部分组成。 头部和载荷都是 JSON 格式，并使用 Base64 编码。 头部包含签名算法等信息；载荷包含客户端信息；签名可以验证前面两部分是否被修改。 由于 JWT Token 中包含了全部信息，并且不会保存在服务端，因此非常适合分布式系统。</p><h2 id="什么是跨域问题" tabindex="-1"><a class="header-anchor" href="#什么是跨域问题"><span>什么是跨域问题？</span></a></h2><p>跨域问题是同源策略带来的问题。</p><p>同源是指两个 URL 协议、主机名、端口号都相同，同源策略要求网页只能加载、操作同源的资源。 同源策略是为了保证数据安全采取的一种策略。</p><p>为解决跨域问题，服务器需要设置跨域资源共享来放宽同源策略的限制。</p>',66),l=[n];function s(i,o){return p(),t("div",null,l)}const T=e(h,[["render",s],["__file","2-应用层.html.vue"]]),r=JSON.parse('{"path":"/dev/principle/network/2-%E5%BA%94%E7%94%A8%E5%B1%82.html","title":"2. 应用层","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"HTTP 报文有哪些部分？","slug":"http-报文有哪些部分","link":"#http-报文有哪些部分","children":[]},{"level":2,"title":"HTTP 有哪些状态码？","slug":"http-有哪些状态码","link":"#http-有哪些状态码","children":[]},{"level":2,"title":"HTTP 长连接是什么？","slug":"http-长连接是什么","link":"#http-长连接是什么","children":[]},{"level":2,"title":"HTTP 为什么不安全？","slug":"http-为什么不安全","link":"#http-为什么不安全","children":[]},{"level":2,"title":"HTTPS 与 HTTP 有什么区别？HTTPS 是如何工作的？","slug":"https-与-http-有什么区别-https-是如何工作的","link":"#https-与-http-有什么区别-https-是如何工作的","children":[]},{"level":2,"title":"客户端如何进行证书校验？","slug":"客户端如何进行证书校验","link":"#客户端如何进行证书校验","children":[]},{"level":2,"title":"什么是 HTTPS 中间人攻击？如何防范？","slug":"什么是-https-中间人攻击-如何防范","link":"#什么是-https-中间人攻击-如何防范","children":[]},{"level":2,"title":"HTTP 2 相比 HTTP 1.1 有哪些改进？","slug":"http-2-相比-http-1-1-有哪些改进","link":"#http-2-相比-http-1-1-有哪些改进","children":[]},{"level":2,"title":"DNS 的端口号是多少？","slug":"dns-的端口号是多少","link":"#dns-的端口号是多少","children":[]},{"level":2,"title":"DNS 是基于什么协议实现的？","slug":"dns-是基于什么协议实现的","link":"#dns-是基于什么协议实现的","children":[]},{"level":2,"title":"介绍一下 HTTP 的无状态性","slug":"介绍一下-http-的无状态性","link":"#介绍一下-http-的无状态性","children":[]},{"level":2,"title":"HTTP 是无状态的，如何进行 HTTP 状态管理？","slug":"http-是无状态的-如何进行-http-状态管理","link":"#http-是无状态的-如何进行-http-状态管理","children":[]},{"level":2,"title":"什么是跨域问题？","slug":"什么是跨域问题","link":"#什么是跨域问题","children":[]}],"git":{"updatedTime":1725412272000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":3}]},"filePathRelative":"dev/principle/network/2-应用层.md"}');export{T as comp,r as data};
