import{_ as s,c as e,o as n,a}from"./app-DJp3z32_.js";const i="/yi-doc/assets/img_138-C7wH3blg.png",l="/yi-doc/assets/img_139-DnR8Smza.png",c="/yi-doc/assets/img_140-Bwhnkpug.png",t="/yi-doc/assets/img_141-DC2j-X0Q.png",d="/yi-doc/assets/img_142-ubUCobXE.png",o="/yi-doc/assets/img_143-yoc07nny.png",p="/yi-doc/assets/img_144-CfiGSS00.png",r="/yi-doc/assets/img_145-zAuWE1eM.png",m="/yi-doc/assets/img_146-BpO6QorT.png",u="/yi-doc/assets/img_147-uZNNbwwp.png",v="/yi-doc/assets/img_148-LjDEd0Uw.png",g="/yi-doc/assets/img_149-DXHpKkSQ.png",_="/yi-doc/assets/img_150-Bu7jEFni.png",h="/yi-doc/assets/img_151-D_Q4S3q-.png",b="/yi-doc/assets/img_152-BlGldFS6.png",y="/yi-doc/assets/img_153-BKcmrrw4.png",x={},f=a('<h1 id="五、vuex" tabindex="-1"><a class="header-anchor" href="#五、vuex"><span>五、<code>Vuex</code></span></a></h1><h2 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍"><span>1、介绍</span></a></h2><p><code>vuex</code>是 vue 的一个状态(数据)管理工具，帮助我们管理 vue 通用的数据(多组件共享的数据)。</p><p>例如，个人信息只需要维护一份，使用组件通信机制太麻烦。</p><p><img src="'+i+'" alt="img_138.png"> 使用<code>vuex</code>可以：</p><ul><li>集中管理数据</li><li>响应式变化</li></ul><h2 id="_2、state-数据-状态" tabindex="-1"><a class="header-anchor" href="#_2、state-数据-状态"><span>2、<code>state</code>：数据/状态</span></a></h2><p><code>state</code>提供唯一的公共数据源，所有共享数据需要放到<code>store</code>中的<code>state</code>。</p><h3 id="_1-数据定义" tabindex="-1"><a class="header-anchor" href="#_1-数据定义"><span>(1) 数据定义</span></a></h3><p><img src="'+l+'" alt="img_139.png"></p><h3 id="_2-数据使用" tabindex="-1"><a class="header-anchor" href="#_2-数据使用"><span>(2) 数据使用</span></a></h3><h4 id="通过store直接访问" tabindex="-1"><a class="header-anchor" href="#通过store直接访问"><span>通过<code>store</code>直接访问</span></a></h4><p><img src="'+c+'" alt="img_140.png"></p><h4 id="通过辅助函数mapstate" tabindex="-1"><a class="header-anchor" href="#通过辅助函数mapstate"><span>通过辅助函数<code>mapState</code></span></a></h4><p><code>mapState</code>可以帮助将<code>store</code>中的数据自动映射到组件的<strong>计算属性</strong>中。</p><p><img src="'+t+'" alt="img_141.png"></p><h2 id="_3、mutations数据-状态转变" tabindex="-1"><a class="header-anchor" href="#_3、mutations数据-状态转变"><span>3、<code>mutations</code>数据/状态转变</span></a></h2><p>用于修改<code>state</code>中的数据。</p><p><img src="'+d+'" alt="img_142.png"></p><p><img src="'+o+'" alt="img_143.png"></p><p>辅助函数<code>mapMutations</code>：将<code>mutations</code>中的方法提取出来，映射到组件的<code>methods</code>中。</p><p><img src="'+p+`" alt="img_144.png"></p><p><strong>知识链接：js 中的 <code>...</code></strong></p><p>在 JavaScript 中，&quot;...&quot;表示剩余参数（Rest Parameters）或扩展操作符（Spread Operator）。</p><ol><li>剩余参数（Rest Parameters）：当在函数定义中使用<code>...</code>时，它表示接受任意数量的参数，并将它们作为数组存储在变量中。这样可以处理不确定数量的函数参数。</li></ol><p>使用案例如下：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line">// 计算所有数字之和</span>
<span class="line">function sum(...numbers) {</span>
<span class="line">  let total = 0;</span>
<span class="line">  for (let number of numbers) {</span>
<span class="line">    total += number;</span>
<span class="line">  }</span>
<span class="line">  return total;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">console.log(sum(1, 2, 3, 4)); // 输出: 10</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol start="2"><li>扩展操作符（Spread Operator）：当在函数调用或数组/对象字面量中使用<code>...</code>时，它可以将数组或对象展开为单独的值。这在创建新的数组、合并数组或传递多个参数时非常有用。</li></ol><p>使用案例如下：</p></blockquote><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line">// 创建新数组</span>
<span class="line">const array1 = [1, 2, 3];</span>
<span class="line">const array2 = [...array1, 4, 5, 6];</span>
<span class="line">console.log(array2); // 输出: [1, 2, 3, 4, 5, 6]</span>
<span class="line"></span>
<span class="line">// 合并数组</span>
<span class="line">const array3 = [7, 8, 9];</span>
<span class="line">const mergedArray = [...array1, ...array3];</span>
<span class="line">console.log(mergedArray); // 输出: [1, 2, 3, 7, 8, 9]</span>
<span class="line"></span>
<span class="line">// 函数调用中的参数传递</span>
<span class="line">function greet(name, age) {</span>
<span class="line">  console.log(\`Hello \${name}! You are \${age} years old.\`);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">const person = [&#39;Alice&#39;, 25];</span>
<span class="line">greet(...person); // 输出: Hello Alice! You are 25 years old.</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、actions-异步操作" tabindex="-1"><a class="header-anchor" href="#_4、actions-异步操作"><span>4、<code>actions</code>：异步操作</span></a></h2><p><img src="`+r+'" alt="img_145.png"></p><p>使用<code>mapActions</code>辅助函数将<code>actions</code>中的方法提取出来，映射到组件<code>methods</code>中。</p><p><img src="'+m+`" alt="img_146.png"></p><p><strong>知识链接：JS 中的箭头函数</strong></p><p>在 JavaScript 中，箭头函数（Arrow Functions）是一种简化函数表达式的语法形式。箭头函数提供了一种更简洁的方式来定义函数，并且在某些情况下可以改变函数内部的<code>this</code>的行为。 箭头函数的语法形式如下：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line">(param1, param2, ..., paramN) =&gt; {</span>
<span class="line">  // 函数体</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>箭头函数的特点如下：</p><ol><li>简洁的语法：箭头函数使用箭头(<code>=&gt;</code>)来表示函数，省略了<code>function</code>关键字和函数体中的<code>return</code>关键字（如果函数体只有一行表达式）。</li><li>隐式返回：如果函数体只有一条表达式，箭头函数会自动将该表达式的结果作为返回值，例如：</li></ol><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line">// 传统函数表达式</span>
<span class="line">const add = function(a, b) {</span>
<span class="line">  return a + b;</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line">// 箭头函数</span>
<span class="line">const add = (a, b) =&gt; a + b;</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>没有自己的<code>**this**</code>：箭头函数没有自己的<code>this</code>值，它会继承外部作用域的<code>this</code>值。这意味着箭头函数内部的<code>this</code>与外部作用域的<code>this</code>是相同的，不会因为函数的调用方式而改变。</li></ol><p>总的来说，箭头函数提供了一种简洁的语法形式来定义函数，并且在处理函数作用域和<code>this</code>值时具有特殊的行为。但请注意，箭头函数并不适用于所有场景，特别是在需要动态绑定<code>this</code>的情况下，传统函数表达式仍然是更好的选择。</p><h2 id="_5、getters-vuex-中的计算属性" tabindex="-1"><a class="header-anchor" href="#_5、getters-vuex-中的计算属性"><span>5、<code>getters</code>：vuex 中的计算属性</span></a></h2><p><img src="`+u+'" alt="img_147.png"></p><h2 id="_6、模块化" tabindex="-1"><a class="header-anchor" href="#_6、模块化"><span>6、模块化</span></a></h2><p>在<code>store</code>中使用单一<code>state</code>会很庞大：</p><p><img src="'+v+'" alt="img_148.png"></p><p>将<code>state</code>中的结点进行模块化拆分： <img src="'+g+'" alt="img_149.png"><img src="'+_+'" alt="img_150.png"><img src="'+h+'" alt="img_151.png"><img src="'+b+'" alt="img_152.png"><img src="'+y+'" alt="img_153.png"></p>',47),S=[f];function k(j,w){return n(),e("div",null,S)}const B=s(x,[["render",k],["__file","9-VueX.html.vue"]]),V=JSON.parse('{"path":"/dev/front_end/vue/9-VueX.html","title":"五、Vuex","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、介绍","slug":"_1、介绍","link":"#_1、介绍","children":[]},{"level":2,"title":"2、state：数据/状态","slug":"_2、state-数据-状态","link":"#_2、state-数据-状态","children":[{"level":3,"title":"(1) 数据定义","slug":"_1-数据定义","link":"#_1-数据定义","children":[]},{"level":3,"title":"(2) 数据使用","slug":"_2-数据使用","link":"#_2-数据使用","children":[]}]},{"level":2,"title":"3、mutations数据/状态转变","slug":"_3、mutations数据-状态转变","link":"#_3、mutations数据-状态转变","children":[]},{"level":2,"title":"4、actions：异步操作","slug":"_4、actions-异步操作","link":"#_4、actions-异步操作","children":[]},{"level":2,"title":"5、getters：vuex 中的计算属性","slug":"_5、getters-vuex-中的计算属性","link":"#_5、getters-vuex-中的计算属性","children":[]},{"level":2,"title":"6、模块化","slug":"_6、模块化","link":"#_6、模块化","children":[]}],"git":{"updatedTime":1721739933000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":1}]},"filePathRelative":"dev/front_end/vue/9-VueX.md"}');export{B as comp,V as data};
