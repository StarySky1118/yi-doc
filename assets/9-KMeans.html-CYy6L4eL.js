import{_ as n,c as s,o as a,a as p}from"./app-D5GhxSZ1.js";const t={},e=p(`<h1 id="九、kmeans-聚类" tabindex="-1"><a class="header-anchor" href="#九、kmeans-聚类"><span>九、KMeans 聚类</span></a></h1><h2 id="_1、算法介绍" tabindex="-1"><a class="header-anchor" href="#_1、算法介绍"><span>1、算法介绍</span></a></h2><p>K-means 是一种聚类算法，它将一组数据集合分成 k 个非重叠的子集（称为簇），每个子集代表一个簇，簇的个数 k 是由用户指定的。每个数据点都属于最接近它的簇，而簇的中心点则代表该簇的平均值。</p><p>K-means 算法的基本流程如下：</p><ol><li>从数据集中随机选择 k 个样本点作为初始质心。</li><li>将每个样本点分配到距离其最近的质心所在的簇。</li><li>重新计算每个簇的质心（即每个簇所有样本点的平均值）。</li><li>重复步骤 2 和 3，直到质心不再改变或者达到最大迭代次数。</li></ol><p>K-means 算法的优点是简单易实现，并且对于大数据集有较高的效率和可扩展性。但是，K-means 算法也存在一些缺点，比如对于初始质心的选择敏感，可能会得到局部最优解；而且 K 值需要人为指定，且不易确定最优的 K 值；此外，K-means 算法对于非凸数据集的聚类效果不佳。</p><h2 id="_2、源码分析" tabindex="-1"><a class="header-anchor" href="#_2、源码分析"><span>2、源码分析</span></a></h2><p><strong>数据集分析</strong></p><p>无标签数据集，两个特征，总计 80 条数据。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token number">1.658985</span>	<span class="token number">4.285136</span></span>
<span class="line"><span class="token operator">-</span><span class="token number">3.453687</span>	<span class="token number">3.424321</span></span>
<span class="line"><span class="token number">4.838138</span>	<span class="token operator">-</span><span class="token number">1.151539</span></span>
<span class="line"><span class="token operator">-</span><span class="token number">5.379713</span>	<span class="token operator">-</span><span class="token number">3.362104</span></span>
<span class="line"><span class="token number">0.972564</span>	<span class="token number">2.924086</span></span>
<span class="line"><span class="token operator">-</span><span class="token number">3.567919</span>	<span class="token number">1.531611</span></span>
<span class="line"><span class="token number">0.450614</span>	<span class="token operator">-</span><span class="token number">3.302219</span></span>
<span class="line"><span class="token operator">-</span><span class="token number">3.487105</span>	<span class="token operator">-</span><span class="token number">1.724432</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>程序入口</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 测试 kMeans 函数</span></span>
<span class="line">    testKMeans<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">testKMeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 加载测试数据集</span></span>
<span class="line">    dataMat <span class="token operator">=</span> mat<span class="token punctuation">(</span>loadDataSet<span class="token punctuation">(</span><span class="token string">&#39;./data/testSet.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 该算法会创建k个质心，然后将每个点分配到最近的质心，再重新计算质心。</span></span>
<span class="line">    <span class="token comment"># 这个过程重复数次，知道数据点的簇分配结果不再改变位置。</span></span>
<span class="line">    <span class="token comment"># 运行结果（多次运行结果可能会不一样，可以试试，原因为随机质心的影响，但总的结果是对的， 因为数据足够相似）</span></span>
<span class="line">    myCentroids<span class="token punctuation">,</span> clustAssing <span class="token operator">=</span> kMeans<span class="token punctuation">(</span>dataMat<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;centroids=&#39;</span><span class="token punctuation">,</span> myCentroids<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>聚类</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># k-means 聚类算法</span></span>
<span class="line"><span class="token comment"># 该算法会创建k个质心，然后将每个点分配到最近的质心，再重新计算质心。</span></span>
<span class="line"><span class="token comment"># 这个过程重复数次，知道数据点的簇分配结果不再改变位置。</span></span>
<span class="line"><span class="token comment"># 运行结果（多次运行结果可能会不一样，可以试试，原因为随机质心的影响，但总的结果是对的， 因为数据足够相似，也可能会陷入局部最小值）</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">kMeans</span><span class="token punctuation">(</span>dataMat<span class="token punctuation">,</span> k<span class="token punctuation">,</span> distMeas<span class="token operator">=</span>distEclud<span class="token punctuation">,</span> createCent<span class="token operator">=</span>randCent<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    m <span class="token operator">=</span> shape<span class="token punctuation">(</span>dataMat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 行数</span></span>
<span class="line">    clusterAssment <span class="token operator">=</span> mat<span class="token punctuation">(</span>zeros<span class="token punctuation">(</span></span>
<span class="line">        <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个与 dataMat 行数一样，但是有两列的矩阵，用来保存簇分配结果</span></span>
<span class="line">    centroids <span class="token operator">=</span> createCent<span class="token punctuation">(</span>dataMat<span class="token punctuation">,</span> k<span class="token punctuation">)</span>  <span class="token comment"># 创建质心，随机k个质心</span></span>
<span class="line">    clusterChanged <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    <span class="token keyword">while</span> clusterChanged<span class="token punctuation">:</span></span>
<span class="line">        clusterChanged <span class="token operator">=</span> <span class="token boolean">False</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 循环每一个数据点并分配到最近的质心中去</span></span>
<span class="line">            minDist <span class="token operator">=</span> inf</span>
<span class="line">            minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                distJI <span class="token operator">=</span> distMeas<span class="token punctuation">(</span>centroids<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                  dataMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 计算数据点到质心的距离</span></span>
<span class="line">                <span class="token keyword">if</span> distJI <span class="token operator">&lt;</span> minDist<span class="token punctuation">:</span>  <span class="token comment"># 如果距离比 minDist（最小距离）还小，更新 minDist（最小距离）和最小质心的 index（索引）</span></span>
<span class="line">                    minDist <span class="token operator">=</span> distJI</span>
<span class="line">                    minIndex <span class="token operator">=</span> j</span>
<span class="line">            <span class="token keyword">if</span> clusterAssment<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> minIndex<span class="token punctuation">:</span>  <span class="token comment"># 簇分配结果改变</span></span>
<span class="line">                clusterChanged <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 簇改变</span></span>
<span class="line">                clusterAssment<span class="token punctuation">[</span></span>
<span class="line">                    i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> minIndex<span class="token punctuation">,</span> minDist<span class="token operator">**</span><span class="token number">2</span>  <span class="token comment"># 更新簇分配结果为最小质心的 index（索引），minDist（最小距离）的平方</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>centroids<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> cent <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 更新质心</span></span>
<span class="line">            ptsInClust <span class="token operator">=</span> dataMat<span class="token punctuation">[</span>nonzero<span class="token punctuation">(</span></span>
<span class="line">                clusterAssment<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">==</span> cent<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 获取该簇中的所有点</span></span>
<span class="line">            centroids<span class="token punctuation">[</span>cent<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> mean<span class="token punctuation">(</span></span>
<span class="line">                ptsInClust<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 将质心修改为簇中所有点的平均值，mean 就是求平均值的</span></span>
<span class="line">    <span class="token keyword">return</span> centroids<span class="token punctuation">,</span> clusterAssment</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、算法缺陷" tabindex="-1"><a class="header-anchor" href="#_3、算法缺陷"><span>3、算法缺陷</span></a></h2><ol><li>对初始值敏感：K-means聚类算法需要预先指定聚类中心，这些聚类中心的初始值对最终聚类结果有很大影响。如果初始值选择不当，可能会导致算法陷入局部最优解而得不到全局最优解。</li><li>不适用于非凸数据集：K-means聚类算法基于距离度量进行聚类，因此只适用于凸数据集。对于非凸数据集，由于存在多个局部最优解，聚类结果可能不够准确。</li><li>对噪声和异常值敏感：K-means聚类算法对噪声和异常值非常敏感。如果数据集中存在噪声和异常值，可能会导致聚类中心被错误地影响，从而影响聚类结果。</li><li>需要事先确定聚类个数：K-means聚类算法需要指定聚类个数K，但在实际应用中，往往难以确定K的值。如果K的值选择不合理，可能会导致聚类结果不准确。</li><li>只能用于数值型数据：K-means聚类算法只能用于数值型数据，对于非数值型数据（如文本、图像等），需要进行适当的转换才能使用K-means聚类算法进行聚类。</li></ol><h2 id="_4、二分-kmeans-聚类" tabindex="-1"><a class="header-anchor" href="#_4、二分-kmeans-聚类"><span>4、二分 KMeans 聚类</span></a></h2><h3 id="_1-算法步骤" tabindex="-1"><a class="header-anchor" href="#_1-算法步骤"><span>(1) 算法步骤</span></a></h3><p>该算法首先将所有点作为一个簇，然后将该簇一分为二。</p><p>之后选择其中一个簇继续进行划分，选择哪一个簇进行划分取决于对其划分时候可以最大程度降低 SSE（平方和误差）的值。</p><p>上述基于 SSE 的划分过程不断重复，直到得到用户指定的簇数目为止。</p><h3 id="_2-源码分析" tabindex="-1"><a class="header-anchor" href="#_2-源码分析"><span>(2) 源码分析</span></a></h3><p><strong>数据集概述</strong></p><p>二特征无标签，共 60 条数据。</p><p><strong>程序入口</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token comment"># 测试二分 biKMeans 函数</span></span>
<span class="line">    testBiKMeans<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">testBiKMeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 加载测试数据集</span></span>
<span class="line">    dataMat <span class="token operator">=</span> mat<span class="token punctuation">(</span>loadDataSet<span class="token punctuation">(</span><span class="token string">&#39;./data/testSet2.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    centList<span class="token punctuation">,</span> myNewAssments <span class="token operator">=</span> biKMeans<span class="token punctuation">(</span>dataMat<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;centList=&#39;</span><span class="token punctuation">,</span> centList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二分聚类</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 二分 KMeans 聚类算法, 基于 kMeans 基础之上的优化，以避免陷入局部最小值</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">biKMeans</span><span class="token punctuation">(</span>dataMat<span class="token punctuation">,</span> k<span class="token punctuation">,</span> distMeas<span class="token operator">=</span>distEclud<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    m <span class="token operator">=</span> shape<span class="token punctuation">(</span>dataMat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    clusterAssment <span class="token operator">=</span> mat<span class="token punctuation">(</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 保存每个数据点的簇分配结果和平方误差</span></span>
<span class="line">    centroid0 <span class="token operator">=</span> mean<span class="token punctuation">(</span>dataMat<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 质心初始化为所有数据点的均值</span></span>
<span class="line">    centList <span class="token operator">=</span> <span class="token punctuation">[</span>centroid0<span class="token punctuation">]</span>  <span class="token comment"># 初始化只有 1 个质心的 list</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 计算所有数据点到初始质心的距离平方误差</span></span>
<span class="line">        clusterAssment<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> distMeas<span class="token punctuation">(</span>mat<span class="token punctuation">(</span>centroid0<span class="token punctuation">)</span><span class="token punctuation">,</span> dataMat<span class="token punctuation">[</span>j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>centList<span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 当质心数量小于 k 时</span></span>
<span class="line">        lowestSSE <span class="token operator">=</span> inf</span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>centList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 对每一个质心</span></span>
<span class="line">            ptsInCurrCluster <span class="token operator">=</span> dataMat<span class="token punctuation">[</span>nonzero<span class="token punctuation">(</span></span>
<span class="line">                clusterAssment<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 获取当前簇 i 下的所有数据点</span></span>
<span class="line">            centroidMat<span class="token punctuation">,</span> splitClustAss <span class="token operator">=</span> kMeans<span class="token punctuation">(</span></span>
<span class="line">                ptsInCurrCluster<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> distMeas<span class="token punctuation">)</span>  <span class="token comment"># 将当前簇 i 进行二分 kMeans 处理</span></span>
<span class="line">            sseSplit <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>splitClustAss<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 将二分 kMeans 结果中的平方和的距离进行求和</span></span>
<span class="line">            sseNotSplit <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span></span>
<span class="line">                clusterAssment<span class="token punctuation">[</span>nonzero<span class="token punctuation">(</span>clusterAssment<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                               <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 将未参与二分 kMeans 分配结果中的平方和的距离进行求和</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;sseSplit, and notSplit: &quot;</span><span class="token punctuation">,</span> sseSplit<span class="token punctuation">,</span> sseNotSplit<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>sseSplit <span class="token operator">+</span> sseNotSplit<span class="token punctuation">)</span> <span class="token operator">&lt;</span> lowestSSE<span class="token punctuation">:</span></span>
<span class="line">                bestCentToSplit <span class="token operator">=</span> i</span>
<span class="line">                bestNewCents <span class="token operator">=</span> centroidMat</span>
<span class="line">                bestClustAss <span class="token operator">=</span> splitClustAss<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                lowestSSE <span class="token operator">=</span> sseSplit <span class="token operator">+</span> sseNotSplit</span>
<span class="line">        <span class="token comment"># 找出最好的簇分配结果</span></span>
<span class="line">        bestClustAss<span class="token punctuation">[</span>nonzero<span class="token punctuation">(</span>bestClustAss<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span></span>
<span class="line">            centList<span class="token punctuation">)</span>  <span class="token comment"># 调用二分 kMeans 的结果，默认簇是 0,1. 当然也可以改成其它的数字</span></span>
<span class="line">        bestClustAss<span class="token punctuation">[</span>nonzero<span class="token punctuation">(</span>bestClustAss<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                     <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> bestCentToSplit  <span class="token comment"># 更新为最佳质心</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;the bestCentToSplit is: &#39;</span><span class="token punctuation">,</span> bestCentToSplit<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;the len of bestClustAss is: &#39;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bestClustAss<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 更新质心列表</span></span>
<span class="line">        centList<span class="token punctuation">[</span>bestCentToSplit<span class="token punctuation">]</span> <span class="token operator">=</span> bestNewCents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 更新原质心 list 中的第 i 个质心为使用二分 kMeans 后 bestNewCents 的第一个质心</span></span>
<span class="line">        centList<span class="token punctuation">.</span>append<span class="token punctuation">(</span></span>
<span class="line">            bestNewCents<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加 bestNewCents 的第二个质心</span></span>
<span class="line">        clusterAssment<span class="token punctuation">[</span>nonzero<span class="token punctuation">(</span>clusterAssment<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">==</span> bestCentToSplit<span class="token punctuation">)</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> bestClustAss  <span class="token comment"># 重新分配最好簇下的数据（质心）以及SSE</span></span>
<span class="line">    <span class="token keyword">return</span> mat<span class="token punctuation">(</span>centList<span class="token punctuation">)</span><span class="token punctuation">,</span> clusterAssment</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、sklearn-聚类" tabindex="-1"><a class="header-anchor" href="#_5、sklearn-聚类"><span>5、sklearn 聚类</span></a></h2><h3 id="_1-普通聚类" tabindex="-1"><a class="header-anchor" href="#_1-普通聚类"><span>(1) 普通聚类</span></a></h3><p>Scikit-learn的KMeans聚类算法中，可调整的参数主要包括以下几个：</p><ol><li><strong>n_clusters</strong>：指定聚类的簇数，即K值。</li><li><strong>init</strong>：指定初始化聚类中心的方法，可以是&#39;k-means++&#39;、&#39;random&#39;或一个ndarray类型的自定义初始聚类中心。</li><li><strong>n_init</strong>：指定在不同的随机初始聚类中心情况下，运行算法的次数，并返回最佳的一次结果。</li><li><strong>max_iter</strong>：指定算法运行的最大迭代次数。</li><li><strong>tol</strong>：指定收敛的容忍度，即当聚类中心移动的距离小于tol时，算法认为已经收敛，停止迭代。</li><li><strong>algorithm</strong>：指定算法的实现方式，可以是&#39;auto&#39;、&#39;full&#39;或&#39;elkan&#39;。</li><li><strong>random_state</strong>：指定随机种子，确保算法的可复现性。</li></ol><p>以上是一些常见的KMeans聚类可调整的参数，不同的参数设置会对聚类结果产生不同的影响。在使用KMeans聚类算法时，需要根据具体数据集和聚类需求进行参数的选择和调整。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建一个随机数据集</span></span>
<span class="line">X <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建KMeans模型并拟合数据</span></span>
<span class="line">kmeans <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出聚类中心点和每个数据点所属的簇</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>kmeans<span class="token punctuation">.</span>cluster_centers_<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>kmeans<span class="token punctuation">.</span>labels_<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-二分聚类" tabindex="-1"><a class="header-anchor" href="#_2-二分聚类"><span>(2) 二分聚类</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建一个随机数据集</span></span>
<span class="line">X <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建二分KMeans模型并拟合数据</span></span>
<span class="line">kmeans <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">&#39;full&#39;</span><span class="token punctuation">)</span></span>
<span class="line">kmeans<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 获取每个数据点所属的簇</span></span>
<span class="line">labels <span class="token operator">=</span> kmeans<span class="token punctuation">.</span>labels_</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 二分KMeans聚类</span></span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> Birch</span>
<span class="line">brc <span class="token operator">=</span> Birch<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">brc<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 获取每个数据点所属的簇</span></span>
<span class="line">brc_labels <span class="token operator">=</span> brc<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出聚类结果</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;二分KMeans聚类结果:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>brc_labels<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),l=[e];function c(o,i){return a(),s("div",null,l)}const r=n(t,[["render",c],["__file","9-KMeans.html.vue"]]),k=JSON.parse('{"path":"/ml/traditional_ml/9-KMeans.html","title":"九、KMeans 聚类","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、算法介绍","slug":"_1、算法介绍","link":"#_1、算法介绍","children":[]},{"level":2,"title":"2、源码分析","slug":"_2、源码分析","link":"#_2、源码分析","children":[]},{"level":2,"title":"3、算法缺陷","slug":"_3、算法缺陷","link":"#_3、算法缺陷","children":[]},{"level":2,"title":"4、二分 KMeans 聚类","slug":"_4、二分-kmeans-聚类","link":"#_4、二分-kmeans-聚类","children":[{"level":3,"title":"(1) 算法步骤","slug":"_1-算法步骤","link":"#_1-算法步骤","children":[]},{"level":3,"title":"(2) 源码分析","slug":"_2-源码分析","link":"#_2-源码分析","children":[]}]},{"level":2,"title":"5、sklearn 聚类","slug":"_5、sklearn-聚类","link":"#_5、sklearn-聚类","children":[{"level":3,"title":"(1) 普通聚类","slug":"_1-普通聚类","link":"#_1-普通聚类","children":[]},{"level":3,"title":"(2) 二分聚类","slug":"_2-二分聚类","link":"#_2-二分聚类","children":[]}]}],"git":{"updatedTime":1721739933000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":1}]},"filePathRelative":"ml/traditional_ml/9-KMeans.md"}');export{r as comp,k as data};
