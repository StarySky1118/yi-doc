import{_ as n,c as s,o as a,a as p}from"./app-CcXSsoy8.js";const e="/yi-doc/assets/img-BGDpRnBE.png",t="/yi-doc/assets/img-BGDpRnBE.png",l="/yi-doc/assets/img_2-DuBr5zBN.png",i={},c=p(`<h1 id="一、k-近邻算法" tabindex="-1"><a class="header-anchor" href="#一、k-近邻算法"><span>一、K 近邻算法</span></a></h1><p>KNN（K-Nearest Neighbors）算法是一种常见的监督学习算法，主要用于分类和回归问题。它的思想是基于相似性度量，将未知样本的类别或属性值，赋值为其最近邻居的类别或属性值。</p><p>在 KNN 算法中，K 表示最近邻的个数。在分类问题中，KNN 算法会统计与待分类样本最近的K 个样本的类别，通过多数投票的方式来判断待分类样本的类别。在回归问题中，KNN 算法会统计与待预测样本最近的 K 个样本的属性值，通过取平均值的方式来预测待预测样本的属性值。</p><p>KNN 算法需要预先确定距离度量方法，常用的距离度量方法包括欧氏距离、曼哈顿距离和余弦相似度等。KNN 算法的优点包括简单易懂，无需训练，适用于多分类和高维数据，但是它也存在一些缺点，如对异常值敏感，需要存储所有训练样本等。</p><p>KNN 算法是一种懒惰学习（lazy learning）算法，它不需要训练阶段，只需要存储训练集中的样本和对应的类别（或属性值）。当需要对未知样本进行分类或回归时，KNN算法才进行计算。</p><h2 id="_1、算法原理" tabindex="-1"><a class="header-anchor" href="#_1、算法原理"><span>1、算法原理</span></a></h2><p>KNN（K-Nearest Neighbors）算法的原理是基于样本之间的相似性度量来进行分类或回归。其基本思想是：如果一个样本在特征空间中的K个最相似的样本中，大多数属于某个类别，则该样本也属于这个类别。因此，KNN算法的关键就是如何度量样本之间的相似性。</p><h2 id="_2、算法步骤" tabindex="-1"><a class="header-anchor" href="#_2、算法步骤"><span>2、算法步骤</span></a></h2><ol><li><p>计算未知样本与训练集中所有样本之间的距离（或相似度），并选取距离最近的K个样本。</p></li><li><p>根据K个最近邻样本的类别（或属性值），通过投票的方式来预测未知样本的类别（或属性值）。如果是分类问题，则未知样本的类别为K个最近邻样本中出现次数最多的类别；如果是回归问题，则未知样本的属性值为K个最近邻样本属性值的平均值。</p></li></ol><h2 id="_3、算法特点" tabindex="-1"><a class="header-anchor" href="#_3、算法特点"><span>3、算法特点</span></a></h2><ol><li><p>简单易懂：KNN算法的思想简单易懂，容易理解和实现。</p></li><li><p>无需训练：KNN算法是一种懒惰学习（lazy learning）算法，不需要训练阶段，只需要存储训练集中的样本和对应的类别（或属性值），因此可以快速进行预测。</p></li><li><p>适用于多分类问题：KNN算法适用于多分类问题，可以将样本分为多个类别。</p></li><li><p>适用于高维数据：KNN算法适用于高维数据，不需要对数据进行降维处理。</p></li><li><p>对异常值敏感：KNN算法对异常值敏感，因为它是基于距离度量的，如果某个样本距离待分类样本很近，但是它的类别与待分类样本差异较大，就会影响预测结果。</p></li><li><p>存储空间大：KNN算法需要存储所有训练样本，因此存储空间较大。</p></li><li><p>计算复杂度高：KNN算法需要计算待分类样本和所有训练样本之间的距离，计算复杂度较高，尤其是当训练集较大时。</p></li></ol><h2 id="_4、代码实战" tabindex="-1"><a class="header-anchor" href="#_4、代码实战"><span>4、代码实战</span></a></h2><h3 id="_1-双特征二分类模拟数据集" tabindex="-1"><a class="header-anchor" href="#_1-双特征二分类模拟数据集"><span>(1) 双特征二分类模拟数据集</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">createDataSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    创建数据集和标签</span>
<span class="line"></span>
<span class="line">     调用方式</span>
<span class="line">     import kNN</span>
<span class="line">     group, labels = kNN.createDataSet()</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    group <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">                   <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">                   <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">                   <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> group<span class="token punctuation">,</span> labels</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># knn分类器</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">knn_classifier</span><span class="token punctuation">(</span>input_vector<span class="token punctuation">,</span> data_set<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    :param input_vector: 输入特征向量</span>
<span class="line">    :param data_set: 数据集</span>
<span class="line">    :param labels: 标签</span>
<span class="line">    :param k: KNN 算法参数 k</span>
<span class="line">    :return: 输入特征向量所属标签</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 1.计算距离</span></span>
<span class="line">    <span class="token comment"># 数据集记录条数</span></span>
<span class="line">    data_set_size <span class="token operator">=</span> data_set<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment"># tile生成和训练样本对应的矩阵，并与训练样本求差</span></span>
<span class="line">    diff_mat <span class="token operator">=</span> tile<span class="token punctuation">(</span>input_vector<span class="token punctuation">,</span> <span class="token punctuation">(</span>data_set_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> data_set</span>
<span class="line">    <span class="token comment"># 取平方</span></span>
<span class="line">    sq_diff_mat <span class="token operator">=</span> diff_mat <span class="token operator">**</span> <span class="token number">2</span></span>
<span class="line">    <span class="token comment"># 将矩阵的每一行相加(按列压缩)</span></span>
<span class="line">    sq_distances <span class="token operator">=</span> sq_diff_mat<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 开方</span></span>
<span class="line">    distances <span class="token operator">=</span> sq_distances <span class="token operator">**</span> <span class="token number">0.5</span></span>
<span class="line">    <span class="token comment"># 根据距离排序从小到大的排序，返回对应的索引位置</span></span>
<span class="line">    <span class="token comment"># argsort() 是将x中的元素从小到大排列，提取其对应的index（索引），然后输出到y。</span></span>
<span class="line">    <span class="token comment"># 例如: y=array([3,0,2,1,4,5]) 则，x[3]=-1最小，所以y[0]=3;x[5]=9最大，所以y[5]=5。</span></span>
<span class="line">    sorted_dist_index <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 2. 选择距离最小的k个点</span></span>
<span class="line">    class_count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 找到该样本的类型</span></span>
<span class="line">        voteIlabel <span class="token operator">=</span> labels<span class="token punctuation">[</span>sorted_dist_index<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token comment"># 在字典中将该类型加一</span></span>
<span class="line">        <span class="token comment"># 字典的get方法</span></span>
<span class="line">        <span class="token comment"># 如: list.get(k,d) 其中 get相当于一条if...else...语句,参数k在字典中，字典将返回list[k];如果参数k不在字典中则返回参数d,如果K在字典中则返回k对应的value值</span></span>
<span class="line">        <span class="token comment"># l = {5:2,3:4}</span></span>
<span class="line">        <span class="token comment"># print l.get(3,0)返回的值是4；</span></span>
<span class="line">        <span class="token comment"># Print l.get（1,0）返回值是0；</span></span>
<span class="line">        class_count<span class="token punctuation">[</span>voteIlabel<span class="token punctuation">]</span> <span class="token operator">=</span> class_count<span class="token punctuation">.</span>get<span class="token punctuation">(</span>voteIlabel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">    <span class="token comment"># 3.利用max函数直接返回字典中value最大的key</span></span>
<span class="line">    max_class_count <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>class_count<span class="token punctuation">,</span> key<span class="token operator">=</span>class_count<span class="token punctuation">.</span>get<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> max_class_count</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    第一个例子演示：使用生成的测试数据集</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    group<span class="token punctuation">,</span> labels <span class="token operator">=</span> create_data_set<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>knn_classifier<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    test1<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># datingClassTest()</span></span>
<span class="line">    <span class="token comment"># handwritingClassTest()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-三特征三分类——约会对象" tabindex="-1"><a class="header-anchor" href="#_2-三特征三分类——约会对象"><span>(2) 三特征三分类——约会对象</span></a></h3><h4 id="_1-项目概述与数据集概述" tabindex="-1"><a class="header-anchor" href="#_1-项目概述与数据集概述"><span>1. 项目概述与数据集概述</span></a></h4><p><img src="`+e+'" alt="img.png"><img src="'+t+`" alt="img_1.png"></p><h4 id="_2-具体代码" tabindex="-1"><a class="header-anchor" href="#_2-具体代码"><span>2. 具体代码</span></a></h4><p><strong>导入数据</strong> 将 txt 中的数据导入，生成数据矩阵和标签向量</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">file2matrix</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    导入训练数据</span>
<span class="line">    :param filename: 数据文件路径</span>
<span class="line">    :return: 数据矩阵returnMat和对应的类别classLabelVector</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    fr <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 获得文件中的数据行的行数</span></span>
<span class="line">    numberOfLines <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 生成对应的空矩阵</span></span>
<span class="line">    <span class="token comment"># 例如: zeros(2，3)就是生成一个 2*3的矩阵，各个位置上全是 0</span></span>
<span class="line">    returnMat <span class="token operator">=</span> zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>numberOfLines<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># prepare matrix to return</span></span>
<span class="line">    classLabelVector <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># prepare labels return</span></span>
<span class="line">    fr <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line">    index <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> line <span class="token keyword">in</span> fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># str.strip([chars]) --返回移除字符串头尾指定的字符生成的新字符串</span></span>
<span class="line">        <span class="token comment"># 删除字符串开头和结尾的空白符</span></span>
<span class="line">        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 以 &#39;\\t&#39; 切割字符串</span></span>
<span class="line">        listFromLine <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 每列的属性数据</span></span>
<span class="line">        returnMat<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> listFromLine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token comment"># 每列的类别数据，就是 label 标签数据</span></span>
<span class="line">        classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        index <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token comment"># 返回数据矩阵returnMat和对应的类别classLabelVector</span></span>
<span class="line">    <span class="token keyword">return</span> returnMat<span class="token punctuation">,</span> classLabelVector</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据归一化</strong></p><p>数据归一化是指将数据按照一定的比例缩放，使其落在一个特定的区间内，常用的区间为[0,1]或[-1,1]。归一化的目的是消除不同特征之间的量纲影响，将其转化为同一标准下的数值，以便进行比较和分析。这样可以提高机器学习算法的精度和效率，避免某些特征因数值过大而对算法产生较大影响的情况。数据归一化通常可以使用简单的线性变换方法实现，例如最小-最大缩放方法和z-score标准化方法。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">autoNorm</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    归一化特征值，消除属性之间量级不同导致的影响</span>
<span class="line">    :param dataSet: 数据集</span>
<span class="line">    :return: 归一化后的数据集normDataSet,ranges和minVals即最小值与范围，并没有用到</span>
<span class="line"></span>
<span class="line">    归一化公式:</span>
<span class="line">        Y = (X-Xmin)/(Xmax-Xmin)</span>
<span class="line">        其中的 min 和 max 分别是数据集中的最小特征值和最大特征值。该函数可以自动将数字特征值转化为0到1的区间。</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token comment"># 计算每种属性的最大值、最小值、范围</span></span>
<span class="line">    minVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    maxVals <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 极差</span></span>
<span class="line">    ranges <span class="token operator">=</span> maxVals <span class="token operator">-</span> minVals</span>
<span class="line">    <span class="token comment"># -------第一种实现方式---start-------------------------</span></span>
<span class="line">    normDataSet <span class="token operator">=</span> zeros<span class="token punctuation">(</span>shape<span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    m <span class="token operator">=</span> dataSet<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment"># 生成与最小值之差组成的矩阵</span></span>
<span class="line">    normDataSet <span class="token operator">=</span> dataSet <span class="token operator">-</span> tile<span class="token punctuation">(</span>minVals<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 将最小值之差除以范围组成矩阵</span></span>
<span class="line">    normDataSet <span class="token operator">=</span> normDataSet <span class="token operator">/</span> tile<span class="token punctuation">(</span>ranges<span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># element wise divide</span></span>
<span class="line">    <span class="token comment"># -------第一种实现方式---end---------------------------------------------</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># # -------第二种实现方式---start---------------------------------------</span></span>
<span class="line">    <span class="token comment"># norm_dataset = (dataset - minvalue) / ranges</span></span>
<span class="line">    <span class="token comment"># # -------第二种实现方式---end---------------------------------------------</span></span>
<span class="line">    <span class="token keyword">return</span> normDataSet<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">datingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    对约会网站的测试方法</span>
<span class="line">    :return: 错误数</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token comment"># 设置测试数据的的一个比例（训练数据集比例=1-hoRatio）</span></span>
<span class="line">    hoRatio <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># 测试范围,一部分测试一部分作为样本</span></span>
<span class="line">    <span class="token comment"># 从文件中加载数据</span></span>
<span class="line">    datingDataMat<span class="token punctuation">,</span> datingLabels <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span><span class="token string">&#39;./data/datingTestSet2.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># load data setfrom file</span></span>
<span class="line">    <span class="token comment"># 归一化数据</span></span>
<span class="line">    normMat<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>datingDataMat<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># m 表示数据的行数，即矩阵的第一维</span></span>
<span class="line">    m <span class="token operator">=</span> normMat<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment"># 设置测试的样本数量， numTestVecs:m表示训练样本的数量</span></span>
<span class="line">    numTestVecs <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>m <span class="token operator">*</span> hoRatio<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;numTestVecs=&#39;</span><span class="token punctuation">,</span> numTestVecs<span class="token punctuation">)</span></span>
<span class="line">    errorCount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 对数据测试</span></span>
<span class="line">        classifierResult <span class="token operator">=</span> knn_classifier<span class="token punctuation">(</span>normMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> normMat<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">:</span>m<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> datingLabels<span class="token punctuation">[</span>numTestVecs<span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;the classifier came back with: %d, the real answer is: %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>classifierResult<span class="token punctuation">,</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>classifierResult <span class="token operator">!=</span> datingLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> errorCount <span class="token operator">+=</span> <span class="token number">1.0</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;the total error rate is: %f&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>errorCount <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>numTestVecs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>errorCount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1024-特征-10-分类——手写字体" tabindex="-1"><a class="header-anchor" href="#_3-1024-特征-10-分类——手写字体"><span>(3) 1024 特征 10 分类——手写字体</span></a></h3><h4 id="_1-项目概述和数据集概述" tabindex="-1"><a class="header-anchor" href="#_1-项目概述和数据集概述"><span>1. 项目概述和数据集概述</span></a></h4><p><img src="`+l+`" alt="img_2.png"></p><h4 id="_2-具体代码-1" tabindex="-1"><a class="header-anchor" href="#_2-具体代码-1"><span>2. 具体代码</span></a></h4><p><strong>图像转向量</strong></p><p>首先需要将 32<em>32 的黑白图像转换为 1</em>1024 的特征向量。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">img2vector</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    将图像数据转换为向量</span>
<span class="line">    :param filename: 图片文件 因为我们的输入数据的图片格式是 32 * 32的</span>
<span class="line">    :return: 一维矩阵</span>
<span class="line">    该函数将图像转换为向量: 该函数创建 1 * 1024 的NumPy数组，然后打开给定的文件，</span>
<span class="line">    循环读出文件的前32行，并将每行的头32个字符值存储在NumPy数组中，最后返回数组。</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    returnVect <span class="token operator">=</span> zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    fr <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        lineStr <span class="token operator">=</span> fr<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            returnVect<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>lineStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> returnVect</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试代码</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">handwritingClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 1. 导入数据</span></span>
<span class="line">    hwLabels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    trainingFileList <span class="token operator">=</span> listdir<span class="token punctuation">(</span><span class="token string">&#39;./data/trainingDigits&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># load the training set</span></span>
<span class="line">    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>trainingFileList<span class="token punctuation">)</span></span>
<span class="line">    trainingMat <span class="token operator">=</span> zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># hwLabels存储0～9对应的index位置， trainingMat存放的每个位置对应的图片向量</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        fileNameStr <span class="token operator">=</span> trainingFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        fileStr <span class="token operator">=</span> fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># take off .txt</span></span>
<span class="line">        classNumStr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>fileStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        hwLabels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>classNumStr<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 将 32*32的矩阵-&gt;1*1024的矩阵</span></span>
<span class="line">        trainingMat<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> img2vector<span class="token punctuation">(</span><span class="token string">&#39;./data/trainingDigits/%s&#39;</span> <span class="token operator">%</span> fileNameStr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 2. 导入测试数据</span></span>
<span class="line">    testFileList <span class="token operator">=</span> listdir<span class="token punctuation">(</span><span class="token string">&#39;./data/testDigits&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># iterate through the test set</span></span>
<span class="line">    errorCount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line">    mTest <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>testFileList<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        fileNameStr <span class="token operator">=</span> testFileList<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        fileStr <span class="token operator">=</span> fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># take off .txt</span></span>
<span class="line">        classNumStr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>fileStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        vectorUnderTest <span class="token operator">=</span> img2vector<span class="token punctuation">(</span><span class="token string">&#39;./data/testDigits/%s&#39;</span> <span class="token operator">%</span> fileNameStr<span class="token punctuation">)</span></span>
<span class="line">        classifierResult <span class="token operator">=</span> knn_classifier<span class="token punctuation">(</span>vectorUnderTest<span class="token punctuation">,</span> trainingMat<span class="token punctuation">,</span> hwLabels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;the classifier came back with: %d, the real answer is: %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>classifierResult<span class="token punctuation">,</span> classNumStr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>classifierResult <span class="token operator">!=</span> classNumStr<span class="token punctuation">)</span><span class="token punctuation">:</span> errorCount <span class="token operator">+=</span> <span class="token number">1.0</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nthe total number of errors is: %d&quot;</span> <span class="token operator">%</span> errorCount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nthe total error rate is: %f&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>errorCount <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>mTest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、sklearn-中的-knn" tabindex="-1"><a class="header-anchor" href="#_5、sklearn-中的-knn"><span>5、sklearn 中的 knn</span></a></h2><h3 id="_1-使用案例-鸢尾花" tabindex="-1"><a class="header-anchor" href="#_1-使用案例-鸢尾花"><span>(1) 使用案例：鸢尾花</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 导入 iris 数据集</span></span>
<span class="line">iris <span class="token operator">=</span> load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">X <span class="token operator">=</span> iris<span class="token punctuation">.</span>data  <span class="token comment"># 数据</span></span>
<span class="line">y <span class="token operator">=</span> iris<span class="token punctuation">.</span>target  <span class="token comment"># 标签</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 划分测试集和训练集</span></span>
<span class="line">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义并训练模型</span></span>
<span class="line">knn <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 预测测试集结果</span></span>
<span class="line">y_pred <span class="token operator">=</span> knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 性能评估</span></span>
<span class="line">accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Accuracy:&#39;</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-约会对象" tabindex="-1"><a class="header-anchor" href="#_2-约会对象"><span>(2) 约会对象</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier</span>
<span class="line"><span class="token keyword">from</span> myKNN <span class="token keyword">import</span> file2matrix<span class="token punctuation">,</span> autoNorm</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 导入数据集并进行归一化</span></span>
<span class="line">X<span class="token punctuation">,</span> y <span class="token operator">=</span> file2matrix<span class="token punctuation">(</span><span class="token string">&quot;./data/datingTestSet2.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line">X<span class="token punctuation">,</span> ranges<span class="token punctuation">,</span> minVals <span class="token operator">=</span> autoNorm<span class="token punctuation">(</span>X<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 划分测试集和训练集</span></span>
<span class="line">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义并训练模型</span></span>
<span class="line">knn <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 预测测试集结果</span></span>
<span class="line">y_pred <span class="token operator">=</span> knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 性能评估</span></span>
<span class="line">accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Accuracy:&#39;</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-手写字体识别" tabindex="-1"><a class="header-anchor" href="#_3-手写字体识别"><span>(3) 手写字体识别</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier</span>
<span class="line"><span class="token keyword">from</span> myKNN <span class="token keyword">import</span> img2vector</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score</span>
<span class="line"><span class="token keyword">from</span> os <span class="token keyword">import</span> listdir</span>
<span class="line"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">generate_dataset_and_labels</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    生成手写字体数据集和标签</span>
<span class="line">    :param filename: 文件路径</span>
<span class="line">    :return: 数据集 data_set 和 标签 labels</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 标签</span></span>
<span class="line">    file_list <span class="token operator">=</span> listdir<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>  <span class="token comment"># 文件名列表</span></span>
<span class="line">    data_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span>  <span class="token comment"># 数据集记录条数</span></span>
<span class="line">    data_set <span class="token operator">=</span> zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>data_length<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 数据集</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>data_length<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        fileNameStr <span class="token operator">=</span> file_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        fileStr <span class="token operator">=</span> fileNameStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># take off .txt</span></span>
<span class="line">        classNumStr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>fileStr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>classNumStr<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 将 32*32的矩阵-&gt;1*1024的矩阵</span></span>
<span class="line">        data_set<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> img2vector<span class="token punctuation">(</span><span class="token string">&#39;./data/trainingDigits/%s&#39;</span> <span class="token operator">%</span> fileNameStr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> data_set<span class="token punctuation">,</span> labels</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 生成训练集</span></span>
<span class="line">trainingMat<span class="token punctuation">,</span> trainingLabels <span class="token operator">=</span> generate_dataset_and_labels<span class="token punctuation">(</span><span class="token string">&#39;./data/trainingDigits&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 导入测试集</span></span>
<span class="line">testMat<span class="token punctuation">,</span> testLabels <span class="token operator">=</span> generate_dataset_and_labels<span class="token punctuation">(</span><span class="token string">&#39;./data/testDigits&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义并训练模型</span></span>
<span class="line">knn <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trainingMat<span class="token punctuation">,</span> trainingLabels<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 预测测试集结果</span></span>
<span class="line">y_pred <span class="token operator">=</span> knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>testMat<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 性能评估</span></span>
<span class="line">accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>testLabels<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Accuracy:&#39;</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),o=[c];function u(r,k){return a(),s("div",null,o)}const m=n(i,[["render",u],["__file","1-K近邻算法.html.vue"]]),v=JSON.parse('{"path":"/ml/traditional_ml/1-K%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.html","title":"一、K 近邻算法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、算法原理","slug":"_1、算法原理","link":"#_1、算法原理","children":[]},{"level":2,"title":"2、算法步骤","slug":"_2、算法步骤","link":"#_2、算法步骤","children":[]},{"level":2,"title":"3、算法特点","slug":"_3、算法特点","link":"#_3、算法特点","children":[]},{"level":2,"title":"4、代码实战","slug":"_4、代码实战","link":"#_4、代码实战","children":[{"level":3,"title":"(1) 双特征二分类模拟数据集","slug":"_1-双特征二分类模拟数据集","link":"#_1-双特征二分类模拟数据集","children":[]},{"level":3,"title":"(2) 三特征三分类——约会对象","slug":"_2-三特征三分类——约会对象","link":"#_2-三特征三分类——约会对象","children":[]},{"level":3,"title":"(3) 1024 特征 10 分类——手写字体","slug":"_3-1024-特征-10-分类——手写字体","link":"#_3-1024-特征-10-分类——手写字体","children":[]}]},{"level":2,"title":"5、sklearn 中的 knn","slug":"_5、sklearn-中的-knn","link":"#_5、sklearn-中的-knn","children":[{"level":3,"title":"(1) 使用案例：鸢尾花","slug":"_1-使用案例-鸢尾花","link":"#_1-使用案例-鸢尾花","children":[]},{"level":3,"title":"(2) 约会对象","slug":"_2-约会对象","link":"#_2-约会对象","children":[]},{"level":3,"title":"(3) 手写字体识别","slug":"_3-手写字体识别","link":"#_3-手写字体识别","children":[]}]}],"git":{"updatedTime":1721739933000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":1}]},"filePathRelative":"ml/traditional_ml/1-K近邻算法.md"}');export{m as comp,v as data};
