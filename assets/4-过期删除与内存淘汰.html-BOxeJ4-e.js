import{_ as e,c as a,o as t,a as i}from"./app-CfWMsw_m.js";const s={},n=i('<h1 id="_4-过期删除与内存淘汰" tabindex="-1"><a class="header-anchor" href="#_4-过期删除与内存淘汰"><span>4. 过期删除与内存淘汰</span></a></h1><p>过期删除是删除过期的键值对。 内存淘汰是内存已满时，淘汰一些键值对，腾出内存空间。</p><h2 id="过期删除" tabindex="-1"><a class="header-anchor" href="#过期删除"><span>过期删除</span></a></h2><p>Redis 过期删除包括主动删除和被动删除两种。</p><p>主动删除是指，使用异步线程扫描键值对，将过期的键值对删除。</p><p>被动删除是指，客户端访问键值对时，首先判断是否过期，再进行删除。</p><h2 id="淘汰策略" tabindex="-1"><a class="header-anchor" href="#淘汰策略"><span>淘汰策略</span></a></h2><p>Redis 淘汰策略大致分为两类：不进行淘汰和进行淘汰。</p><p>不进行淘汰策略中，当内存已满，新键值对插入操作无法进行，但查询删除修改仍能正常执行。</p><p>进行淘汰策略中，又可以分为针对有过期时间数据和所有数据。 针对有过期时间的数据，可以使用随机、ttl、lru 和 lfu。 针对所有数据，可以使用随机、lru 和 lfu。</p>',10),l=[n];function r(c,p){return t(),a("div",null,l)}const d=e(s,[["render",r],["__file","4-过期删除与内存淘汰.html.vue"]]),h=JSON.parse('{"path":"/dev/principle/redis/4-%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E4%B8%8E%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0.html","title":"4. 过期删除与内存淘汰","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"过期删除","slug":"过期删除","link":"#过期删除","children":[]},{"level":2,"title":"淘汰策略","slug":"淘汰策略","link":"#淘汰策略","children":[]}],"git":{"updatedTime":1725412272000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":1}]},"filePathRelative":"dev/principle/redis/4-过期删除与内存淘汰.md"}');export{d as comp,h as data};
