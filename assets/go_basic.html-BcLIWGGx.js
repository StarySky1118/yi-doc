import{_ as n,a as s}from"./hello_go-DdQ0IQeB.js";import{_ as a}from"./go_keywords-C3MbmCWG.js";import{_ as e,c as p,o as t,a as l}from"./app-CX8HT7kZ.js";const i={},c=l('<h1 id="go-基础" tabindex="-1"><a class="header-anchor" href="#go-基础"><span>Go 基础</span></a></h1><h2 id="_1-环境安装" tabindex="-1"><a class="header-anchor" href="#_1-环境安装"><span>1.环境安装</span></a></h2><p><a href="https://golang.google.cn/dl/" target="_blank" rel="noopener noreferrer">https://golang.google.cn/dl/</a><img src="'+n+`" alt="image.png"> 安装会自动将<code>Go/bin</code>添加到环境变量。</p><p><strong>测试</strong></p><p>在工作目录中创建<code>test.go</code>文件。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开命令窗口，输入<code>go run test.go</code><img src="`+s+'" alt="image.png"></p><h2 id="_2-基本结构和基本数据类型" tabindex="-1"><a class="header-anchor" href="#_2-基本结构和基本数据类型"><span>2. 基本结构和基本数据类型</span></a></h2><h3 id="_2-1-文件名、关键字与标识符" tabindex="-1"><a class="header-anchor" href="#_2-1-文件名、关键字与标识符"><span>2.1 文件名、关键字与标识符</span></a></h3><p><strong>文件名</strong></p><p>Go 的<strong>源文件均由小写字母组成</strong>，如<code>scanner.go</code>。如果文件名由多个部分组成，则使用下划线<code>_</code>对它们进行分隔，如<code>scanner_test.go</code>。</p><p><strong>关键字</strong></p><p>Go 语言有如下的关键字： <img src="'+a+`" alt="image.png"></p><p>Go 语句无需<code>;</code>结尾。</p><h3 id="_2-2-go-程序的基本结构和要素" tabindex="-1"><a class="header-anchor" href="#_2-2-go-程序的基本结构和要素"><span>2.2 Go 程序的基本结构和要素</span></a></h3><h4 id="_2-2-1-包的概念、导入与可见性" tabindex="-1"><a class="header-anchor" href="#_2-2-1-包的概念、导入与可见性"><span>2.2.1 包的概念、导入与可见性</span></a></h4><p>每个 Go 文件都属于且仅属于一个包。 一个包可以由许多以<code>.go</code>为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。 你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：<code>package main</code>。<code>package main</code>表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为<code>main</code>的包。 所有的<strong>包名都应该使用小写字母</strong>。</p><p><strong>标准库</strong></p><p>在 Go 的安装文件里包含了一些可以直接使用的包，即标准库。一般情况下，标准包会存放在 <code>$GOROOT/pkg/$GOOS_$GOARCH/</code>目录下。</p><p><strong>包的编译</strong></p><p>如果想要构建一个程序，则包和包内的文件都必须以正确的顺序进行编译。 包的依赖关系决定了其构建顺序。属于同一个包的源文件必须全部被一起编译，<strong>一个包即是编译时的一个单元</strong>，因此根据惯例，每个目录都只包含一个包。 <strong>如果对一个包进行更改或重新编译，所有引用了这个包的客户端程序都必须全部重新编译。</strong> Go 中的包模型采用了显式依赖关系的机制来达到快速编译的目的，编译器会从后缀名为<code>.o</code>的对象文件（需要且只需要这个文件）中提取传递依赖类型的信息。 如果<code>A.go</code>依赖<code>B.go</code>，而<code>B.go</code>又依赖<code>C.go</code>：</p><ul><li>编译<code>C.go</code>, <code>B.go</code>, 然后是<code>A.go</code>.</li><li>为了编译<code>A.go</code>, 编译器读取的是<code>B.o</code>而不是<code>C.o</code>. 这种机制对于编译大型的项目时可以显著地提升编译速度。</li><li></li></ul><p><strong>包的链接</strong></p><p>一个 Go 程序是通过<code>import</code>关键字将一组包链接在一起。</p><p>通过如下代码导入多个包：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;os&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>包内对象的可见性规则——大写可见、小写不可见</strong></p><p>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：<code>Group1</code>，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的<code>public</code>）； 标识符如果以小写字母开头，则对包外是不可见的，但是它们在整个包的内部是可见并且可用的（像面向对象语言中的<code>private</code>）。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> fm <span class="token string">&quot;fmt&quot;</span> <span class="token comment">// alias3</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   fm<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在使用<code>import</code>导入包之后定义或声明 0 个或多个常量 (const)、变量 (var) 和类型 (type)，这些对象的作用域都是全局的（在本包范围内），所以可以被本包中所有的函数调用，然后声明一个或多个函数 (func)。</p><h4 id="_2-2-2-函数" tabindex="-1"><a class="header-anchor" href="#_2-2-2-函数"><span>2.2.2 函数</span></a></h4><p>函数的语法格式如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">functionName</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span> <span class="token punctuation">(</span>return_value_list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   …</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>parameter_list</code>的形式为<code>(param1 type1, param2 type2, …)</code></li><li><code>return_value_list</code>的形式为<code>(ret1 type1, ret2 type2, …)</code></li></ul><p>这种多返回值一般用于判断某个函数是否执行成功 (<code>true</code>/<code>false</code>) 或与其它返回值一同返回错误消息。</p><p>只有当某个函数需要被外部包调用的时候才使用大写字母开头，并遵循 Pascal 命名法；否则就遵循骆驼命名法，即第一个单词的首字母小写，其余单词的首字母大写。(导出：<code>GetUserList</code>、不导出：<code>getUserList</code>)</p><p><code>main()</code>函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有<code>init()</code>函数则会先执行该函数）。<code>main()</code>函数既没有参数，也没有返回类型（与 C 家族中的其它语言恰好相反）。</p><h4 id="_2-2-3-注释" tabindex="-1"><a class="header-anchor" href="#_2-2-3-注释"><span>2.2.3 注释</span></a></h4><p>单行：<code>//</code></p><p>多行：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">	多行注释</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>每一个包应该有相关注释，在<code>package</code>语句之前的块注释将被默认认为是这个包的文档说明，其中应该提供一些相关信息并对整体功能做简要的介绍。 一个包可以分散在多个文件中，但是只需要在其中一个进行注释说明即可。 当开发人员需要了解包的一些情况时，自然会用<code>godoc</code>来显示包的文档说明，在首行的简要注释之后可以用成段的注释来进行更详细的说明，而不必拥挤在一起。 另外，在多段注释之间应以空行分隔加以区分。</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Package superman implements methods for saving the world.</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// Experience has shown that a small number of procedures can prove</span></span>
<span class="line"><span class="token comment">// helpful when attempting to save the world.</span></span>
<span class="line"><span class="token keyword">package</span> superman</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几乎所有全局作用域的类型、常量、变量、函数和被导出的对象都应该有一个合理的注释。 如果这种注释（称为文档注释）出现在函数前面，例如函数<code>Abcd</code>，则要以 &quot;Abcd...&quot; 作为开头。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// enterOrbit causes Superman to fly into low Earth orbit, a position</span></span>
<span class="line"><span class="token comment">// that presents several possibilities for planet salvation.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">enterOrbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>godoc 工具会收集这些注释并产生一个技术文档。</p><h4 id="_2-2-4-类型" tabindex="-1"><a class="header-anchor" href="#_2-2-4-类型"><span>2.2.4 类型</span></a></h4><p>使用<code>var</code>声明的变量的值会自动初始化为该类型的零值。 类型可以是基本类型，如：<code>int</code>、<code>float</code>、<code>bool</code>、<code>string</code>；结构化的（复合的），如：<code>struct</code>、<code>array</code>、切片 (slice)、<code>map</code>、通道 (channel)；只描述类型的行为的，如：<code>interface</code>。 结构化的类型没有真正的值，它使用<code>nil</code>作为默认值。<strong>Go 语言中不存在类型继承</strong>。 使用<code>type</code>关键字可以定义你自己的类型，你可能想要定义一个结构体。如果你有多个类型需要定义，可以使用因式分解关键字的方式。 每个值都必须在经过编译后属于某个类型（编译器必须能够推断出所有值的类型），因为 Go 语言是一种<strong>静态类型语言</strong>。</p><h4 id="_2-2-5-go-程序的一般结构" tabindex="-1"><a class="header-anchor" href="#_2-2-5-go-程序的一般结构"><span>2.2.5 Go 程序的一般结构</span></a></h4><ul><li>在完成包的<code>import</code>之后，开始对常量、变量和类型的定义或声明。</li><li>如果存在<code>init()</code>函数的话，则对该函数进行定义（这是一个特殊的函数，每个含有该函数的包都会首先执行这个函数）。</li><li>如果当前包是<code>main</code>包，则定义<code>main()</code>函数。</li><li>然后定义其余的函数，首先是类型的方法，接着是按照<code>main()</code>函数中先后调用的顺序来定义相关函数，如果有很多函数，则可以按照字母顺序来进行排序。</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">&quot;C&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> v <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> T <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// initialization of package</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">var</span> a <span class="token builtin">int</span></span>
<span class="line">   <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token comment">// ...</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t T<span class="token punctuation">)</span> <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">//...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">Func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// exported function Func1</span></span>
<span class="line">   <span class="token comment">//...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-6-类型转换" tabindex="-1"><a class="header-anchor" href="#_2-2-6-类型转换"><span>2.2.6 类型转换</span></a></h4><p>由于 Go 语言不存在隐式类型转换，因此所有的转换都必须显式说明，就像调用一个函数一样（类型在这里的作用可以看作是一种函数）：<code>valueOfTypeB = typeB(valueOfTypeA)</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">a <span class="token operator">:=</span> <span class="token number">5.0</span></span>
<span class="line">b <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>具有相同底层类型的变量之间可以相互转换：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> IZ <span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> a IZ <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">c <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line">d <span class="token operator">:=</span> <span class="token function">IZ</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-7-go-命名规范" tabindex="-1"><a class="header-anchor" href="#_2-2-7-go-命名规范"><span>2.2.7 Go 命名规范</span></a></h4><p>名称不需要指出自己所属的包，因为在调用的时候会使用包名作为限定符。 返回某个对象的函数或方法的名称一般都是使用名词，没有<code>Get...</code>之类的字符，如果是用于修改某个对象，则使用<code>SetName()</code>。 有必须要的话可以使用大小写混合的方式，如<code>MixedCaps()</code>或<code>mixedCaps()</code>，而不是使用下划线来分割多个名称。</p><h3 id="_2-2-3-常量" tabindex="-1"><a class="header-anchor" href="#_2-2-3-常量"><span>2.2.3 常量</span></a></h3><p>常量使用关键字<code>const</code>定义，用于存储不会改变的数据。存储在常量中的数据类型只可以是<strong>布尔型</strong>、数字型（整数型、浮点型和复数）和字符串型。 常量的定义格式：<code>const identifier [type] = value</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span></span>
<span class="line"><span class="token keyword">const</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以省略类型说明符<code>[type]</code>，因为编译器可以根据变量的值来推断其类型。 常量的值必须是能够在编译时就能够确定的；你可以在其赋值表达式中涉及计算过程，但是所有用于计算的值必须在编译期间就能获得。<strong>在编译期间自定义函数均属于未知，因此无法用于常量的赋值，但内置函数可以使用，如：</strong><code>**len()**</code><strong>。</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 正确用法</span></span>
<span class="line"><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span></span>
<span class="line"><span class="token comment">// 错误用法</span></span>
<span class="line"><span class="token keyword">const</span> c2 <span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出。 常量的并行赋值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> Monday<span class="token punctuation">,</span> Tuesday<span class="token punctuation">,</span> Wednesday<span class="token punctuation">,</span> Thursday<span class="token punctuation">,</span> Friday<span class="token punctuation">,</span> Saturday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">	Monday<span class="token punctuation">,</span> Tuesday<span class="token punctuation">,</span> Wednesday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span></span>
<span class="line">	Thursday<span class="token punctuation">,</span> Friday<span class="token punctuation">,</span> Saturday <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量用作枚举：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">	Unknown <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">	Male <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">	Female <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、变量" tabindex="-1"><a class="header-anchor" href="#_4、变量"><span>4、变量</span></a></h2><p><strong>变量的声明</strong> 声明变量的一般形式是使用<code>var</code>关键字：<code>var identifier type</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token builtin">int</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token builtin">bool</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token builtin">string</span></span>
<span class="line"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token builtin">int</span><span class="token operator">*</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 因式分解关键字的写法一般用于声明全局变量</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token punctuation">(</span></span>
<span class="line">    a <span class="token builtin">int</span></span>
<span class="line">    b <span class="token builtin">bool</span></span>
<span class="line">    str <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个变量被声明之后，系统自动赋予它该类型的零值：<code>int</code>为<code>0</code>，<code>float32(64)</code>为<code>0.0</code>，<code>bool</code>为<code>false</code>，<code>string</code>为空字符串，指针为<code>nil</code>。所有的变量在 Go 中都是经过初始化的。 <strong>变量的命名规则</strong> 变量的命名规则遵循<strong>驼峰命名法</strong>，即首个单词小写，每个新单词的首字母大写，例如：<code>numShips</code>和 <code>startDate</code>。但如果你的全局变量希望能够被外部包所使用，则需要将首个单词的首字母也大写。 <strong>变量的作用域</strong> 一个变量（常量、类型或函数）在程序中都有一定的作用范围，称之为作用域。如果一个变量在函数体外声明，则被认为是全局变量，可以在整个包甚至外部包（被导出后）使用，不管你声明在哪个源文件里或在哪个源文件里调用该变量。 变量可以编译期间就被赋值，赋值给变量使用运算符等号<code>=</code>，当然你也可以在运行时对变量进行赋值操作。 在函数体内声明局部变量，最好使用<code>a := 6</code>的形式。这被称为初始化声明。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;runtime&quot;</span></span>
<span class="line">	<span class="token string">&quot;os&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取操作系统</span></span>
<span class="line">	<span class="token keyword">var</span> goos <span class="token builtin">string</span> <span class="token operator">=</span> runtime<span class="token punctuation">.</span>GOOS</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The operating system is: %s\\n&quot;</span><span class="token punctuation">,</span> goos<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 获取环境变量</span></span>
<span class="line">	path <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">&quot;PATH&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Path is %s\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>值类型和引用类型</strong> 所有像<code>int</code>、<code>float</code>、<code>bool</code>和<code>string</code>这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值。另外，像数组和结构这些复合类型也是值类型。 当使用等号<code>=</code>将一个变量的值赋值给另一个变量时，如：<code>j = i</code>，实际上是在内存中将<code>i</code>的值进行了拷贝： <img src="https://cdn.nlark.com/yuque/0/2023/png/34476449/1686045110624-f2eeec2a-3040-4429-82b9-40bb886a243e.png#averageHue=%23fbfbfa&amp;clientId=u9a21f0f0-f38d-4&amp;from=paste&amp;id=u80afa5c1&amp;originHeight=238&amp;originWidth=356&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=45198&amp;status=done&amp;style=stroke&amp;taskId=u474a007a-716c-4c49-ae94-af3cc793324&amp;title=" alt="image.png"> 你可以通过<code>&amp;i</code>来获取变量<code>i</code>的内存地址：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	a <span class="token operator">:=</span> <span class="token number">6</span></span>
<span class="line">	b <span class="token operator">:=</span> a</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a <span class="token operator">==</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出结果：true、false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个引用类型的变量<code>r1</code>存储的是<code>r1</code>的值所在的内存地址（数字），或内存地址中第一个字所在的位置。 <img src="https://cdn.nlark.com/yuque/0/2023/png/34476449/1686045327822-deb4b95c-a787-4a48-b966-1a912f5ffd0c.png#averageHue=%23fafaf9&amp;clientId=u9a21f0f0-f38d-4&amp;from=paste&amp;id=u4ceb2eb7&amp;originHeight=213&amp;originWidth=624&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=70409&amp;status=done&amp;style=stroke&amp;taskId=uc0495e7a-a524-41f2-8cbf-3036bb73d2a&amp;title=" alt="image.png"> 这个内存地址被称之为指针。 在 Go 语言中，指针属于引用类型，其它的引用类型还包括<code>slices</code>，<code>maps</code>和<code>channel</code>。被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。 <strong>打印</strong> 函数<code>fmt.Print</code>和<code>fmt.Println</code>会自动使用格式化标识符<code>%v</code>对字符串进行格式化，两者都会在每个参数之间自动增加空格，例如：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello:&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 将会输出：Hello: 23</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量赋值</strong> 可以使用<code>a, b, c = 5, 7, &quot;abc&quot;</code>或<code>a, b, c := 5, 7, &quot;abc&quot;</code>进行多变量并行赋值。 交换值：<code>a, b = b, a</code>。 空白标识符<code>_</code>也被用于抛弃值，如值<code>5</code>在：<code>_, b = 5, 7</code>中被抛弃。 <code>_</code>实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。 <code>**init()**</code><strong>函数</strong> 变量除了可以在全局声明中初始化，也可以在<code>init()</code>函数中初始化。这是一类非常特殊的函数，它不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比<code>main()</code>函数高。 每个源文件可以包含多个<code>init()</code>函数，同一个源文件中的<code>init()</code>函数会按照从上到下的顺序执行，如果一个包有多个源文件包含<code>init()</code>函数的话，则官方鼓励但不保证以文件名的顺序调用。初始化总是以单线程并且按照包的依赖关系顺序执行。 一个可能的用途是在开始执行程序之前对数据进行检验或修复，以保证程序状态的正确性。</p><h2 id="_5、基本类型与运算符" tabindex="-1"><a class="header-anchor" href="#_5、基本类型与运算符"><span>5、基本类型与运算符</span></a></h2><h3 id="_1-布尔类型bool" tabindex="-1"><a class="header-anchor" href="#_1-布尔类型bool"><span>(1) 布尔类型<code>bool</code></span></a></h3><p>两个类型相同的值可以使用相等<code>==</code>或者不等<code>!=</code>运算符来进行比较并获得一个布尔型的值。 Go 对于值之间的比较有非常严格的限制，只有两个类型相同的值才可以进行比较，如果值的类型是接口，它们也必须都实现了相同的接口。如果其中一个值是常量，那么另外一个值的类型必须和该常量类型相兼容的。如果以上条件都不满足，则其中一个值的类型必须在被转换为和另外一个值的类型相同之后才可以进行比较。 <code>&amp;&amp;</code>、<code>||</code>。 在格式化输出时，你可以使用<code>%t</code>来表示你要输出的值为布尔型。</p><h3 id="_2-数字类型" tabindex="-1"><a class="header-anchor" href="#_2-数字类型"><span>(2) 数字类型</span></a></h3><p>Go 也有<strong>基于架构的类型</strong>，例如：<code>int</code>、<code>uint</code>和<code>uintptr</code>。 这些类型的长度都是根据运行程序所在的操作系统类型所决定的： <code>int</code>和<code>uint</code>在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。 <code>uintptr</code>的长度被设定为足够存放一个指针即可。 Go 语言中没有 float 类型。（Go语言中只有 float32 和 float64）没有 double 类型。 <img src="https://cdn.nlark.com/yuque/0/2023/png/34476449/1686648998656-bf985af8-cdf7-402c-b491-9f8239b95f88.png#averageHue=%23fefdfc&amp;clientId=uc5fb4fe5-bdf1-4&amp;from=paste&amp;height=535&amp;id=u12fb2dd5&amp;originHeight=669&amp;originWidth=811&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=81671&amp;status=done&amp;style=stroke&amp;taskId=u305312bd-97a4-46b3-9920-6b3dd7f6a62&amp;title=&amp;width=648.8" alt="image.png"> 尽可能地使用<code>float64</code>，因为<code>math</code>包中所有有关数学运算的函数都会要求接收这个类型。 你可以通过增加前缀<code>0</code>来表示 8 进制数（如：<code>077</code>），增加前缀<code>0x</code>来表示 16 进制数（如：<code>0xFF</code>），以及使用 e 来表示 10 的连乘（如： 1e3 = 1000，或者 6.022e23 = 6.022 x 1e23）。 在格式化字符串里，<code>%d</code>用于格式化整数（<code>%x</code>和<code>%X</code>用于格式化 16 进制表示的数字），<code>%g</code>用于格式化浮点型（<code>%f</code>输出浮点数，<code>%e</code>输出科学计数表示法），<code>%0nd</code>用于规定输出长度为 n 的整数，其中开头的数字 0 是必须的。 Go 中拥有以下逻辑运算符：<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>。 算术运算符：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>++</code>、<code>--</code> 包<code>unicode</code>包含了一些针对测试字符的非常有用的函数（其中 ch 代表字符）：</p><ul><li>判断是否为字母：<code>unicode.IsLetter(ch)</code></li><li>判断是否为数字：<code>unicode.IsDigit(ch)</code></li><li>判断是否为空白符号：<code>unicode.IsSpace(ch)</code></li></ul><p>这些函数返回单个布尔值。</p><h3 id="_3-类型别名——type" tabindex="-1"><a class="header-anchor" href="#_3-类型别名——type"><span>(3) 类型别名——<code>type</code></span></a></h3><p>使用语法：<code>type CUSTOM_TYPE_NAME int</code></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token comment">// 使用 type 给类型起别名</span></span>
<span class="line"><span class="token keyword">type</span> TZ <span class="token builtin">int</span></span>
<span class="line"><span class="token keyword">type</span> Rope <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> a<span class="token punctuation">,</span> b TZ <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span></span>
<span class="line">	c <span class="token operator">:=</span> a <span class="token operator">+</span> b</span>
<span class="line">	<span class="token keyword">var</span> rope Rope <span class="token operator">=</span> <span class="token string">&quot;绳子&quot;</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;和为：%d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>rope<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型别名得到的新类型并非和原类型完全相同，新类型不会拥有原类型所附带的方法。</p><h3 id="_4-字符类型" tabindex="-1"><a class="header-anchor" href="#_4-字符类型"><span>(4) 字符类型</span></a></h3><p>字符只是整数的特殊用例。<code>byte</code>类型是<code>uint8</code>的别名，<code>rune</code>类型是<code>unit16</code>的别名。格式化说明符 <code>%c</code>用于表示字符。</p><h2 id="_6、字符串" tabindex="-1"><a class="header-anchor" href="#_6、字符串"><span>6、字符串</span></a></h2><p>字符串是 UTF-8 字符的一个序列，字符串是一种<strong>值类型</strong>，且值不可变，即创建某个文本后你无法再次修改这个文本的内容；更深入地讲，字符串是字节的定长数组。<code>string</code>类型的零值为长度为零的字符串，即空字符串<code>&quot;&quot;</code>。一般的比较运算符（<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>）通过在内存中按字节比较来实现字符串的对比。获取字符串中某个字节的地址的行为是非法的，例如：<code>&amp;str[i]</code>。 可以通过函数<code>len()</code>来获取字符串所占的字节长度，例如：<code>len(str)</code>。</p><h2 id="_7、strings和strconv包" tabindex="-1"><a class="header-anchor" href="#_7、strings和strconv包"><span>7、<code>strings</code>和<code>strconv</code>包</span></a></h2><p>Go 中使用<code>strings</code>包来完成对字符串的主要操作。 <code>strings</code>包中包括判断前后缀、判断包含关系、子串在父串中的索引、字符串替换、统计字符串出现次数、修改字符串大小写、字符串修剪、字符串分割、字符串拼接。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;strings&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	str <span class="token operator">:=</span> <span class="token string">&quot;波尔布特疑似有点太极端了&quot;</span></span>
<span class="line">	subStr <span class="token operator">:=</span> <span class="token string">&quot;波尔布特&quot;</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 前缀与后缀</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 包含</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 替换</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> subStr<span class="token punctuation">,</span> <span class="token string">&quot;祖波人&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 出现次数统计</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 重复字符串</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与字符串相关的类型转换都是通过<code>strconv</code>包实现的。</p><h2 id="_8、时间和日期" tabindex="-1"><a class="header-anchor" href="#_8、时间和日期"><span>8、时间和日期</span></a></h2><p><code>time</code>包为我们提供了一个数据类型<code>time.Time</code>（作为值使用）以及显示和测量时间和日期的功能函数。当前时间可以使用<code>time.Now()</code>获取，使用<code>t.Day()</code>、<code>t.Minute()</code>等等来获取时间的一部分。</p><h2 id="_9、指针" tabindex="-1"><a class="header-anchor" href="#_9、指针"><span>9、指针</span></a></h2><p>Go 中无法进行指针运算。**一个指针变量可以指向任何一个值的内存地址。**它指向那个值的内存地址，在 32 位机器上占用 4 个字节，在 64 位机器上占用 8 个字节，并且与它所指向的值的大小无关。指针的格式化标识符为<code>%p</code>。符号<code>*</code>可以放在一个指针前，如<code>*intP</code>，那么它将得到这个指针指向地址上所存储的值，这被称为反引用（或者内容或者间接引用）操作符。 一个指针变量通常缩写为<code>ptr</code>。</p><h1 id="三、控制结构" tabindex="-1"><a class="header-anchor" href="#三、控制结构"><span>三、控制结构</span></a></h1><p>Go 提供了下面这些条件结构和分支结构：</p><ul><li>if-else 结构</li><li>switch 结构</li><li>select 结构</li></ul><p>可以使用迭代或循环结构来重复执行一次或多次某段代码（任务）：</p><ul><li>for (range) 结构</li></ul><p>一些如<code>break</code>和<code>continue</code>这样的关键字可以用于中途改变循环的状态。 此外，你还可以使用<code>return</code>来结束某个函数的执行，或使用<code>goto</code>和标签来调整程序的执行位置。 Go 完全省略了<code>if</code>、<code>switch</code>和<code>for</code>结构中条件语句两侧的括号，相比 Java、C++ 和 C# 中减少了很多视觉混乱的因素，同时也使你的代码更加简洁。</p><h2 id="_1、if-else" tabindex="-1"><a class="header-anchor" href="#_1、if-else"><span>1、if-else</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition1 <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something	</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition2 <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something else	</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// catch-all or default</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使当代码块之间只有一条语句时，大括号也不可被省略。 关键字<code>if</code>和<code>else</code>之后的左大括号<code>{</code>必须和关键字在同一行，如果你使用了<code>else-if</code>结构，则前段代码块的右大括号<code>}</code>必须和<code>else-if</code>关键字在同一行。 <code>if</code>可以包含一个初始化语句，使用简短方式<code>:=</code>声明的变量的作用域只存在于 if 结构中（在 if 结构的大括号之间，如果使用 if-else 结构则在 else 代码块中变量也会存在）。如果变量在 if 结构之前就已经存在，那么在 if 结构中，该变量原来的值会被隐藏。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> initialization<span class="token punctuation">;</span> condition <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// do something</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;runtime&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> os <span class="token operator">:=</span> runtime<span class="token punctuation">.</span>GOOS<span class="token punctuation">;</span> os <span class="token operator">==</span> <span class="token string">&quot;windows&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;都什么年代了，还在用传统windows&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>if</code>判断错误的产生：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">value<span class="token punctuation">,</span> err <span class="token operator">:=</span> pack1<span class="token punctuation">.</span><span class="token function">Function1</span><span class="token punctuation">(</span>param1<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;An error occured in pack1.Function1 with parameter %v&quot;</span><span class="token punctuation">,</span> param1<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 未发生错误，继续执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、switch" tabindex="-1"><a class="header-anchor" href="#_2、switch"><span>2、switch</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">switch</span> var1 <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> val1<span class="token punctuation">:</span></span>
<span class="line">		<span class="token operator">...</span></span>
<span class="line">	<span class="token keyword">case</span> val2<span class="token punctuation">:</span></span>
<span class="line">		<span class="token operator">...</span></span>
<span class="line">	<span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前花括号<code>{</code>必须和<code>switch</code>关键字在同一行。不需要特别使用<code>break</code>语句来表示结束。程序也不会自动地去执行下一个分支的代码。如果在执行完每个分支的代码后，还希望继续执行后续分支的代码，可以使用<code>fallthrough</code>关键字来达到目的。 Go 的<code>switch</code>比较灵活：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">case</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">case</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化并判断：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">switch</span> initialization <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">case</span> val1<span class="token punctuation">:</span></span>
<span class="line">		<span class="token operator">...</span></span>
<span class="line">	<span class="token keyword">case</span> val2<span class="token punctuation">:</span></span>
<span class="line">		<span class="token operator">...</span></span>
<span class="line">	<span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> outputStr <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">switch</span> isExtreme <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">case</span> isExtreme <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">			outputStr <span class="token operator">=</span> <span class="token string">&quot;波尔布特疑似有点太极端了&quot;</span></span>
<span class="line">		<span class="token keyword">case</span> isExtreme <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">			outputStr <span class="token operator">=</span> <span class="token string">&quot;波尔布特疑似有点太城市化了&quot;</span></span>
<span class="line">		<span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">			outputStr <span class="token operator">=</span> <span class="token string">&quot;祖波人&quot;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>outputStr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、for" tabindex="-1"><a class="header-anchor" href="#_3、for"><span>3、for</span></a></h2><p>想要重复执行某些语句，Go 语言中只有<code>for</code>结构可以使用。</p><h3 id="_1-基于计数器的迭代" tabindex="-1"><a class="header-anchor" href="#_1-基于计数器的迭代"><span>(1) 基于计数器的迭代</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> 初始化语句<span class="token punctuation">;</span> 条件语句<span class="token punctuation">;</span> 修饰语句 <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;This is the %d iteration\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，左花括号<code>{</code>必须和<code>for</code>语句在同一行，计数器的生命周期在遇到右花括号<code>}</code>时便终止。一般习惯使用<code>i</code>、<code>j</code>、<code>z</code>或<code>ix</code>等较短的名称命名计数器。 永远不要在循环体内修改计数器，这在任何语言中都是非常差的实践！</p><h3 id="_2-基于条件判断的迭代" tabindex="-1"><a class="header-anchor" href="#_2-基于条件判断的迭代"><span>(2) 基于条件判断的迭代</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">		i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;The variable i is now: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-for-range" tabindex="-1"><a class="header-anchor" href="#_3-for-range"><span>(3) for-range</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> ix<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> coll <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">for</span> pos<span class="token punctuation">,</span> char <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、标签与goto" tabindex="-1"><a class="header-anchor" href="#_4、标签与goto"><span>4、标签与<code>goto</code></span></a></h2><p>不鼓励使用标签和<code>goto</code>语句。 如果您必须使用<code>goto</code>，应当只使用正序的标签（标签位于<code>goto</code>语句之后），但注意标签和<code>goto</code>语句之间不能出现定义新变量的语句，否则会导致编译失败。</p><h1 id="四、函数" tabindex="-1"><a class="header-anchor" href="#四、函数"><span>四、函数</span></a></h1><p>好的程序是非常注意 DRY 原则的，即不要重复你自己 (Don&#39;t Repeat Yourself)，意思是执行特定任务的代码只能在程序里面出现一次。 Go 里面有三种类型的函数：</p><ul><li>普通的带有名字的函数</li><li>匿名函数或者lambda函数</li><li>方法（Methods）</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Go 中不允许函数重载。</p><h2 id="_1、函数参数与返回值" tabindex="-1"><a class="header-anchor" href="#_1、函数参数与返回值"><span>1、函数参数与返回值</span></a></h2><p>多值返回是 Go 的一大特性。 :::info 没有参数的函数通常被称为 niladic 函数（niladic function） :::</p><h3 id="_1-值传递和引用传递" tabindex="-1"><a class="header-anchor" href="#_1-值传递和引用传递"><span>(1) 值传递和引用传递</span></a></h3><p>Go 默认使用按值传递来传递参数，也就是传递参数的副本。函数接收参数副本之后，在使用变量的过程中可能对副本的值进行更改，但不会影响到原来的变量，比如 <code>Function(arg1)</code>。 如果你希望函数可以直接修改参数的值，而不是对参数的副本进行操作，你需要将参数的地址（变量名前面添加<code>&amp;</code>符号，比如<code>&amp;variable</code>）传递给函数，这就是按引用传递，比如 <code>Function(&amp;arg1)</code>，此时传递给函数的是一个指针。如果传递给函数的是一个指针，指针的值（一个地址）会被复制，但指针的值所指向的地址上的值不会被复制；我们可以通过这个指针的值来修改这个值所指向的地址上的值。几乎在任何情况下，传递指针（一个32位或者64位的值）的消耗都比传递副本来得少。 在函数调用时，像切片 (slice)、字典 (map)、接口 (interface)、通道 (channel) 这样的引用类型都是默认使用引用传递（即使没有显式的指出指针）。 使用案例：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span></span>
<span class="line">	<span class="token function">changeReply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前值为：%d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">changeReply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token operator">*</span>reply <span class="token operator">=</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-命名的返回值" tabindex="-1"><a class="header-anchor" href="#_2-命名的返回值"><span>(2) 命名的返回值</span></a></h3><p>结果形参会被初始化为相应类型的零值，可直接在函数中使用，需要返回时直接使用<code>return</code>语句即可。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// var sum, multiply, minus = doArithmetic(1, 2)</span></span>
<span class="line">	<span class="token comment">// fmt.Println(sum, multiply, minus)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">var</span> sum<span class="token punctuation">,</span> multiply<span class="token punctuation">,</span> minus <span class="token operator">=</span> <span class="token function">doArithmetic2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> multiply<span class="token punctuation">,</span> minus<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 计算整数的和、积、差</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">doArithmetic</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">doArithmetic2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">int</span><span class="token punctuation">,</span> multiply <span class="token builtin">int</span><span class="token punctuation">,</span> minus <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	sum<span class="token punctuation">,</span> multiply<span class="token punctuation">,</span> minus <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b</span>
<span class="line">	<span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽量使用命名返回值：会使代码更清晰、更简短，同时更加容易读懂。</p><h2 id="_2、传递变长参数" tabindex="-1"><a class="header-anchor" href="#_2、传递变长参数"><span>2、传递变长参数</span></a></h2><p>如果函数的最后一个参数是采用<code>...type</code>的形式，那么这个函数就可以处理一个变长的参数，这个长度可以为 0，这样的函数称为变参函数。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> arg <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">printParam</span><span class="token punctuation">(</span><span class="token string">&quot;波尔布特&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;疑似有点&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;太极端了&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">minimum</span><span class="token punctuation">(</span>numList <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>min <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>numList<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	min <span class="token operator">=</span> numList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> numList <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> value <span class="token operator">&lt;</span> min <span class="token punctuation">{</span></span>
<span class="line">			min <span class="token operator">=</span> value</span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">printParam</span><span class="token punctuation">(</span>strList <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>strList<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> str <span class="token operator">:=</span> <span class="token keyword">range</span> strList <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、defer-和追踪" tabindex="-1"><a class="header-anchor" href="#_3、defer-和追踪"><span>3、defer 和追踪</span></a></h2><p>关键字<code>defer</code>允许我们推迟到函数返回之前一刻才执行某个语句或函数。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;In function1 at the top\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">defer</span> <span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;In function1 at the bottom!\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Function2: Deferred until the end of the calling function!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">In Function1 at the top</span>
<span class="line">In Function1 at the bottom<span class="token operator">!</span></span>
<span class="line">Function2<span class="token punctuation">:</span> Deferred until the end of the calling function<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当有多个<code>defer</code>行为被注册时，它们会以逆序执行。 关键字<code>defer</code>允许我们进行一些函数执行完成后的收尾工作，例如：</p><ol><li>关闭文件流</li><li>解锁一个加锁的资源</li><li>打印最终报告</li><li>关闭数据库连接</li></ol><h2 id="_4、将函数作为参数传递" tabindex="-1"><a class="header-anchor" href="#_4、将函数作为参数传递"><span>4、将函数作为参数传递</span></a></h2><p>函数可以作为其它函数的参数进行传递，然后在其它函数内调用执行，一般称之为回调。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">mqListener</span><span class="token punctuation">(</span>eat<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">mqListener</span><span class="token punctuation">(</span>cb <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;监听到消息，执行回调函数...&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">complain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;波尔布特疑似有点太极端了&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;我特莫吃吃吃吃吃吃&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、闭包" tabindex="-1"><a class="header-anchor" href="#_5、闭包"><span>5、闭包</span></a></h2><p>当我们不希望给函数起名字的时候，可以使用匿名函数，也被称为闭包，例如：<code>func(x, y int) int { return x + y }</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	sum <span class="token operator">:=</span> <span class="token number">0</span></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1e6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		sum <span class="token operator">+=</span> i</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示参数列表的第一对括号必须紧挨着关键字<code>func</code>，因为匿名函数没有名称。花括号<code>{}</code>涵盖着函数体，最后的一对括号表示对该匿名函数的调用。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;reflect&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	pf <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;波尔布特疑似有点太极端了&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token function">pf</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、数组与切片" tabindex="-1"><a class="header-anchor" href="#五、数组与切片"><span>五、数组与切片</span></a></h1><h2 id="_1、数组声明与初始化" tabindex="-1"><a class="header-anchor" href="#_1、数组声明与初始化"><span>1、数组声明与初始化</span></a></h2><p>数组长度也是数组类型的一部分，<code>[5]int</code>和<code>[10]int</code>是属于不同类型的。Go 语言中的数组是一种<strong>值类型，<strong>因此可以通过<code>new()</code>来创建</strong>。</strong> :::info Go 语言中，<code>new()</code>可以得到某类型零值的指针。 在 Go 语言中，<code>new()</code>函数用于创建一个指向新分配的零值的指针。它的主要作用是为值类型（如整数、浮点数、结构体等）分配内存，并返回一个指向该内存的指针。这个指针指向的内存已经被初始化为零值。 语法如下： <code>ptr := new(Type)</code> :::</p><h2 id="_2、切片" tabindex="-1"><a class="header-anchor" href="#_2、切片"><span>2、切片</span></a></h2><p>切片（slice）是对数组连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个引用类型。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集。终止索引标识的项不包括在切片内。切片是可索引的，并且可以由<code>len()</code>函数获取长度。切片的长度可以在运行时修改，最小为 0 最大为相关数组的长度：切片是一个<strong>长度可变的数组</strong>。 切片提供了计算容量的函数<code>cap()</code>可以测量切片最长可以达到多少：最大为数组长度。多个切片如果表示同一个数组的片段，它们可以共享数据。 切片的声明：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 切片无需声明长度</span></span>
<span class="line"><span class="token keyword">var</span> identifier <span class="token punctuation">[</span><span class="token punctuation">]</span>TYPE</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 初始化</span></span>
<span class="line"><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span>TYPE <span class="token operator">=</span> arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">:</span>endIndex<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-将切片作为函数参数" tabindex="-1"><a class="header-anchor" href="#_1-将切片作为函数参数"><span>(1) 将切片作为函数参数</span></a></h3><p>将切片作为参数传递，可以避免数组拷贝。 例：计算数组和</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 计算数组和</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>arrSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> sum <span class="token builtin">int</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> arrSlice <span class="token punctuation">{</span></span>
<span class="line">		sum <span class="token operator">+=</span> val</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> sum</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用make-创建切片" tabindex="-1"><a class="header-anchor" href="#_2-使用make-创建切片"><span>(2) 使用<code>make()</code>创建切片</span></a></h3><p>相关数组还没有定义时，可以使用<code>make()</code>函数来创建一个切片同时创建好相关数组：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="六、map" tabindex="-1"><a class="header-anchor" href="#六、map"><span>六、Map</span></a></h1><p>map 声明语法如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> map1 <span class="token keyword">map</span><span class="token punctuation">[</span>keytype<span class="token punctuation">]</span>valuetype</span>
<span class="line"><span class="token keyword">var</span> map1 <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span></span>
<span class="line"></span>
<span class="line">map1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>keyType<span class="token punctuation">]</span>valueType<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>key 可以是任意可以用<code>==</code>或者<code>!=</code>操作符比较的类型，比如<code>string</code>、<code>int</code>、<code>float</code>。如果要用结构体作为 key 可以提供<code>Key()</code>和<code>Hash()</code>方法，这样可以通过结构体的域计算出唯一的数字或者字符串的 key。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// map 赋值</span></span>
<span class="line">map1<span class="token punctuation">[</span>key1<span class="token punctuation">]</span> <span class="token operator">=</span> val1</span>
<span class="line"><span class="token comment">// map 取值，默认有零值</span></span>
<span class="line">v <span class="token operator">:=</span> map1<span class="token punctuation">[</span>key1<span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 获取键值对数量</span></span>
<span class="line"><span class="token function">len</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1、判断键是否存在与删除元素" tabindex="-1"><a class="header-anchor" href="#_1、判断键是否存在与删除元素"><span>1、判断键是否存在与删除元素</span></a></h2><p><code>map</code>获取值有两个返回值<code>value</code>和<code>isPresent</code>，<code>isPresent</code>是一个<code>bool</code>值，标识键是否存在。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 判断键是否存在</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	map1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line">	key <span class="token operator">:=</span> <span class="token string">&quot;波尔布特&quot;</span></span>
<span class="line">	map1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;极端&quot;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token function">isKeyPresent</span><span class="token punctuation">(</span>map1<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;键存在&quot;</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token function">delete</span><span class="token punctuation">(</span>map1<span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isKeyPresent</span><span class="token punctuation">(</span>map1<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;键已删除&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 判断键是否存在</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">isKeyPresent</span><span class="token punctuation">(</span>datamap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token boolean">_</span><span class="token punctuation">,</span> isPresent <span class="token operator">:=</span> datamap<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">return</span> isPresent</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、for-range" tabindex="-1"><a class="header-anchor" href="#_2、for-range"><span>2、for-range</span></a></h2><p><code>map</code>类型的<code>for-range</code>，第一个参数为<code>key</code>，第二个参数为<code>value</code>，没有<code>index</code>，因为是无序的。 使用案例：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	datamap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	datamap<span class="token punctuation">[</span><span class="token string">&quot;波尔布特&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;极端&quot;</span></span>
<span class="line">	datamap<span class="token punctuation">[</span><span class="token string">&quot;张伟&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;大众&quot;</span></span>
<span class="line">	datamap<span class="token punctuation">[</span><span class="token string">&quot;詹姆斯&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;强大&quot;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> datamap <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;键为:%s,值为:%s&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七、结构体与方法" tabindex="-1"><a class="header-anchor" href="#七、结构体与方法"><span>七、结构体与方法</span></a></h1><p>结构体也是<strong>值类型</strong>，因此可以通过<code>new()</code>函数来创建。组成结构体类型的那些数据称为<strong>字段（fields）</strong>。</p><h2 id="_1、结构体定义" tabindex="-1"><a class="header-anchor" href="#_1、结构体定义"><span>1、结构体定义</span></a></h2><p>结构体定义格式：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> identifier <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    field1 type1</span>
<span class="line">    field2 type2</span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值语法如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> s T</span>
<span class="line">s<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">s<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用<code>new()</code>创建结构体零值，并返回指针：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">t <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 Go 中，<code>.</code>称为选择器，无论变量是一个结构体类型还是一个结构体类型指针，都使用同样的<strong>选择器符</strong>来引用结构体的字段：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 家庭住址</span></span>
<span class="line">	<span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">		no <span class="token builtin">int</span></span>
<span class="line">		detail <span class="token builtin">string</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">type</span> VCard <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">		name <span class="token builtin">string</span></span>
<span class="line">		address <span class="token operator">*</span>Address</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	myAddress <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span></span>
<span class="line">	myAddress<span class="token punctuation">.</span>no <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">	myAddress<span class="token punctuation">.</span>detail <span class="token operator">=</span> <span class="token string">&quot;山东省济南市&quot;</span></span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myAddress<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	myVCard <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>VCard<span class="token punctuation">)</span></span>
<span class="line">	myVCard<span class="token punctuation">.</span>address <span class="token operator">=</span> myAddress</span>
<span class="line">	myVCard<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span></span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myVCard<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、使用工厂方法创建结构体实例" tabindex="-1"><a class="header-anchor" href="#_2、使用工厂方法创建结构体实例"><span>2、使用工厂方法创建结构体实例</span></a></h2><p>Go 语言不支持面向对象编程语言中那样的构造子方法，但是可以很容易的在 Go 中实现&quot;构造子工厂&quot;方法。为了方便通常会为类型定义一个工厂，按惯例，工厂的名字以<code>new</code>或<code>New</code>开头。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;unsafe&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件结构体</span></span>
<span class="line"><span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 文件名</span></span>
<span class="line">	name <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// 后缀名</span></span>
<span class="line">	suffix <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fp <span class="token operator">:=</span> <span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token string">&quot;明日方舟&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> suffix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>File <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>File<span class="token punctuation">{</span>name<span class="token punctuation">,</span> suffix<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过将结构体首字母小写，只提供工厂方法，可强制使用工厂方法创建结构体实例。</p><h2 id="_3、方法" tabindex="-1"><a class="header-anchor" href="#_3、方法"><span>3、方法</span></a></h2><h3 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span>(1) 概念</span></a></h3><p>Go 方法是作用在接收者上的一个函数，接收者是某种类型的变量。一个类型加上它的方法等价于面向对象中的一个类。一个重要的区别是：在 Go 中，类型的代码和绑定在它上面的方法的代码可以不放置在一起，它们可以存在在不同的源文件，唯一的要求是：它们必须是同一个包的。 方法定义语法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>recv receiver_type<span class="token punctuation">)</span> <span class="token function">methodName</span><span class="token punctuation">(</span>parameter_list<span class="token punctuation">)</span> <span class="token punctuation">(</span>return_value_list<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>recv</code>就像是面向对象语言中的<code>this</code>或<code>self</code>，但是 Go 中并没有这两个关键字。随个人喜好，可以使用<code>this</code>或<code>self</code>作为接收者的名字。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件结构体</span></span>
<span class="line"><span class="token keyword">type</span> file <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 文件名</span></span>
<span class="line">	name <span class="token builtin">string</span></span>
<span class="line">	<span class="token comment">// 后缀</span></span>
<span class="line">	suffix <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 工厂方法</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> suffix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>file <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token operator">&amp;</span>file<span class="token punctuation">{</span>name<span class="token punctuation">,</span> suffix<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// getter</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> this<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token function">Suffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> this<span class="token punctuation">.</span>suffix</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// toString</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>file<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> this<span class="token punctuation">.</span>name <span class="token operator">+</span> this<span class="token punctuation">.</span>suffix</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fp <span class="token operator">:=</span> <span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token string">&quot;明日方舟&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.exe&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-getter-setter" tabindex="-1"><a class="header-anchor" href="#_2-getter-setter"><span>(2) getter &amp; setter</span></a></h3><p>使用方法可以实现<code>getter</code>和<code>setter</code>。</p><h3 id="_3-内嵌类型方法与继承" tabindex="-1"><a class="header-anchor" href="#_3-内嵌类型方法与继承"><span>(3) 内嵌类型方法与继承</span></a></h3><p>当一个匿名类型被内嵌在结构体中时，匿名类型的可见方法也同样被内嵌，这在效果上等同于外层类型<strong>继承</strong>了这些方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*引擎*/</span></span>
<span class="line"><span class="token keyword">type</span> engine <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引擎启动</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>engine<span class="token punctuation">)</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;星露谷物语，启动！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 引擎关闭</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>engine<span class="token punctuation">)</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;星露谷物语，关闭！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*汽车*/</span></span>
<span class="line"><span class="token keyword">type</span> car <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token operator">*</span>engine</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	e <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span></span>
<span class="line">	e<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	car <span class="token operator">:=</span> car<span class="token punctuation">{</span>e<span class="token punctuation">}</span></span>
<span class="line">	car<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="八、接口与反射" tabindex="-1"><a class="header-anchor" href="#八、接口与反射"><span>八、接口与反射</span></a></h1><h2 id="_1、接口" tabindex="-1"><a class="header-anchor" href="#_1、接口"><span>1、接口</span></a></h2><p>接口定义了一组方法。接口定义格式：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Namer <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Method1</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type</span>
<span class="line">    <span class="token function">Method2</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span> return_type</span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照约定，只包含一个方法的接口的名字由方法名加<code>[e]r</code>后缀组成，例如<code>Printer</code>、<code>Reader</code>、<code>Writer</code>、<code>Logger</code>、<code>Converter</code>等等。Go 语言中的接口都很简短，通常它们会包含 0 个、最多 3 个方法。接口类型的变量是一个<strong>指针</strong>，如下，变量<code>shaper</code>就是一个指针，通常程序控制其在运行时指向一个实现该接口的实例。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> shaper Shaper</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一个类型可以实现多个接口，接口和类型的桥梁只是函数。 接口的使用案例：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.1415</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Shaper 接口，有一个 Area() 方法</span></span>
<span class="line"><span class="token keyword">type</span> Shaper <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 圆形</span></span>
<span class="line"><span class="token keyword">type</span> Circle <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 半径</span></span>
<span class="line">	radius <span class="token builtin">float64</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方形</span></span>
<span class="line"><span class="token keyword">type</span> Square <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 边长</span></span>
<span class="line">	edge <span class="token builtin">float64</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Circle 实现 Shaper 接口</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>circle <span class="token operator">*</span>Circle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> pi <span class="token operator">*</span> circle<span class="token punctuation">.</span>radius <span class="token operator">*</span> circle<span class="token punctuation">.</span>radius</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Square 实现 Shaper 接口</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>square <span class="token operator">*</span>Square<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> square<span class="token punctuation">.</span>edge <span class="token operator">*</span> square<span class="token punctuation">.</span>edge</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// Circle 实例</span></span>
<span class="line">	circle <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Circle<span class="token punctuation">)</span></span>
<span class="line">	circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">	<span class="token comment">// Square 实例</span></span>
<span class="line">	square <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Square<span class="token punctuation">)</span></span>
<span class="line">	square<span class="token punctuation">.</span>edge <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">var</span> shaper Shaper <span class="token operator">=</span> circle</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>shaper<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	shaper <span class="token operator">=</span> square</span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>shaper<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述代码中，<code>Shaper</code>接口包含<code>Area()</code>方法，类型<code>Circle</code>和<code>Square</code>均实现了<code>Shaper</code>接口。<code>shaper</code>变量是一个指针，它可以指向任何实现<code>Shaper</code>接口的实例。这便是 Go 版本的多态。</p></blockquote><h2 id="_2、接口嵌套" tabindex="-1"><a class="header-anchor" href="#_2、接口嵌套"><span>2、接口嵌套</span></a></h2><p>一个接口可以包含一个或多个其他的接口，如下所示：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> ReadWrite <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Read</span><span class="token punctuation">(</span>b Buffer<span class="token punctuation">)</span> <span class="token builtin">bool</span></span>
<span class="line">    <span class="token function">Write</span><span class="token punctuation">(</span>b Buffer<span class="token punctuation">)</span> <span class="token builtin">bool</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> Lock <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> File <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">    ReadWrite</span>
<span class="line">    Lock</span>
<span class="line">    <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>File</code>接口包含了<code>ReadWrite</code>和<code>Lock</code>接口。</p></blockquote><h2 id="_3、运行时类型推断" tabindex="-1"><a class="header-anchor" href="#_3、运行时类型推断"><span>3、运行时类型推断</span></a></h2><p>可以使用<strong>类型断言</strong>来测试在某个时刻接口变量<code>varI</code>是否包含类型<code>T</code>的值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">varI<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> varI<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>  <span class="token comment">// checked type assertion</span></span>
<span class="line">    <span class="token function">Process</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// varI is not of type T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果转换合法，<code>v</code>是<code>varI</code>转换到类型<code>T</code>的值，<code>ok</code>会是<code>true</code>；否则<code>v</code>是类型<code>T</code>的零值，<code>ok</code>是 <code>false</code>，也没有运行时错误发生。</p></blockquote><p>使用案例如下：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;math&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方形</span></span>
<span class="line"><span class="token keyword">type</span> Square <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	side <span class="token builtin">float32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>sq <span class="token operator">*</span>Square<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> sq<span class="token punctuation">.</span>side <span class="token operator">*</span> sq<span class="token punctuation">.</span>side</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 圆形</span></span>
<span class="line"><span class="token keyword">type</span> Circle <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	radius <span class="token builtin">float32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>ci <span class="token operator">*</span>Circle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> ci<span class="token punctuation">.</span>radius <span class="token operator">*</span> ci<span class="token punctuation">.</span>radius <span class="token operator">*</span> math<span class="token punctuation">.</span>Pi</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Shaper 接口</span></span>
<span class="line"><span class="token keyword">type</span> Shaper <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	circle <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Circle<span class="token punctuation">)</span></span>
<span class="line">	circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">var</span> shaper Shaper <span class="token operator">=</span> circle</span>
<span class="line">	<span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> shaper<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Circle<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;面积为:&quot;</span><span class="token punctuation">,</span> shaper<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Circle</code>类型实现了<code>Shaper</code>接口，在运行时检测<code>shaper</code>变量指向<code>Circle</code>类型的实例。</p></blockquote><h2 id="_4、空接口" tabindex="-1"><a class="header-anchor" href="#_4、空接口"><span>4、空接口</span></a></h2><p><strong>空接口或者最小接口</strong>不包含任何方法，它对实现不做任何要求：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Any<span class="token operator">/</span>any <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>任何其他类型都实现了空接口，空接口类似 Java 中所有类的基类：<code>Object</code>类。</p>`,242),o=[c];function u(d,r){return t(),p("div",null,o)}const b=e(i,[["render",u],["__file","go_basic.html.vue"]]),g=JSON.parse('{"path":"/dev/go/go_basic.html","title":"Go 基础","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.环境安装","slug":"_1-环境安装","link":"#_1-环境安装","children":[]},{"level":2,"title":"2. 基本结构和基本数据类型","slug":"_2-基本结构和基本数据类型","link":"#_2-基本结构和基本数据类型","children":[{"level":3,"title":"2.1 文件名、关键字与标识符","slug":"_2-1-文件名、关键字与标识符","link":"#_2-1-文件名、关键字与标识符","children":[]},{"level":3,"title":"2.2 Go 程序的基本结构和要素","slug":"_2-2-go-程序的基本结构和要素","link":"#_2-2-go-程序的基本结构和要素","children":[]},{"level":3,"title":"2.2.3 常量","slug":"_2-2-3-常量","link":"#_2-2-3-常量","children":[]}]},{"level":2,"title":"4、变量","slug":"_4、变量","link":"#_4、变量","children":[]},{"level":2,"title":"5、基本类型与运算符","slug":"_5、基本类型与运算符","link":"#_5、基本类型与运算符","children":[{"level":3,"title":"(1) 布尔类型bool","slug":"_1-布尔类型bool","link":"#_1-布尔类型bool","children":[]},{"level":3,"title":"(2) 数字类型","slug":"_2-数字类型","link":"#_2-数字类型","children":[]},{"level":3,"title":"(3) 类型别名——type","slug":"_3-类型别名——type","link":"#_3-类型别名——type","children":[]},{"level":3,"title":"(4) 字符类型","slug":"_4-字符类型","link":"#_4-字符类型","children":[]}]},{"level":2,"title":"6、字符串","slug":"_6、字符串","link":"#_6、字符串","children":[]},{"level":2,"title":"7、strings和strconv包","slug":"_7、strings和strconv包","link":"#_7、strings和strconv包","children":[]},{"level":2,"title":"8、时间和日期","slug":"_8、时间和日期","link":"#_8、时间和日期","children":[]},{"level":2,"title":"9、指针","slug":"_9、指针","link":"#_9、指针","children":[]},{"level":2,"title":"1、if-else","slug":"_1、if-else","link":"#_1、if-else","children":[]},{"level":2,"title":"2、switch","slug":"_2、switch","link":"#_2、switch","children":[]},{"level":2,"title":"3、for","slug":"_3、for","link":"#_3、for","children":[{"level":3,"title":"(1) 基于计数器的迭代","slug":"_1-基于计数器的迭代","link":"#_1-基于计数器的迭代","children":[]},{"level":3,"title":"(2) 基于条件判断的迭代","slug":"_2-基于条件判断的迭代","link":"#_2-基于条件判断的迭代","children":[]},{"level":3,"title":"(3) for-range","slug":"_3-for-range","link":"#_3-for-range","children":[]}]},{"level":2,"title":"4、标签与goto","slug":"_4、标签与goto","link":"#_4、标签与goto","children":[]},{"level":2,"title":"1、函数参数与返回值","slug":"_1、函数参数与返回值","link":"#_1、函数参数与返回值","children":[{"level":3,"title":"(1) 值传递和引用传递","slug":"_1-值传递和引用传递","link":"#_1-值传递和引用传递","children":[]},{"level":3,"title":"(2) 命名的返回值","slug":"_2-命名的返回值","link":"#_2-命名的返回值","children":[]}]},{"level":2,"title":"2、传递变长参数","slug":"_2、传递变长参数","link":"#_2、传递变长参数","children":[]},{"level":2,"title":"3、defer 和追踪","slug":"_3、defer-和追踪","link":"#_3、defer-和追踪","children":[]},{"level":2,"title":"4、将函数作为参数传递","slug":"_4、将函数作为参数传递","link":"#_4、将函数作为参数传递","children":[]},{"level":2,"title":"5、闭包","slug":"_5、闭包","link":"#_5、闭包","children":[]},{"level":2,"title":"1、数组声明与初始化","slug":"_1、数组声明与初始化","link":"#_1、数组声明与初始化","children":[]},{"level":2,"title":"2、切片","slug":"_2、切片","link":"#_2、切片","children":[{"level":3,"title":"(1) 将切片作为函数参数","slug":"_1-将切片作为函数参数","link":"#_1-将切片作为函数参数","children":[]},{"level":3,"title":"(2) 使用make()创建切片","slug":"_2-使用make-创建切片","link":"#_2-使用make-创建切片","children":[]}]},{"level":2,"title":"1、判断键是否存在与删除元素","slug":"_1、判断键是否存在与删除元素","link":"#_1、判断键是否存在与删除元素","children":[]},{"level":2,"title":"2、for-range","slug":"_2、for-range","link":"#_2、for-range","children":[]},{"level":2,"title":"1、结构体定义","slug":"_1、结构体定义","link":"#_1、结构体定义","children":[]},{"level":2,"title":"2、使用工厂方法创建结构体实例","slug":"_2、使用工厂方法创建结构体实例","link":"#_2、使用工厂方法创建结构体实例","children":[]},{"level":2,"title":"3、方法","slug":"_3、方法","link":"#_3、方法","children":[{"level":3,"title":"(1) 概念","slug":"_1-概念","link":"#_1-概念","children":[]},{"level":3,"title":"(2) getter & setter","slug":"_2-getter-setter","link":"#_2-getter-setter","children":[]},{"level":3,"title":"(3) 内嵌类型方法与继承","slug":"_3-内嵌类型方法与继承","link":"#_3-内嵌类型方法与继承","children":[]}]},{"level":2,"title":"1、接口","slug":"_1、接口","link":"#_1、接口","children":[]},{"level":2,"title":"2、接口嵌套","slug":"_2、接口嵌套","link":"#_2、接口嵌套","children":[]},{"level":2,"title":"3、运行时类型推断","slug":"_3、运行时类型推断","link":"#_3、运行时类型推断","children":[]},{"level":2,"title":"4、空接口","slug":"_4、空接口","link":"#_4、空接口","children":[]}],"git":{"updatedTime":1721465295000,"contributors":[{"name":"ZhangZiYi","email":"ecustzzy1@163.com","commits":1}]},"filePathRelative":"dev/go/go_basic.md"}');export{b as comp,g as data};
